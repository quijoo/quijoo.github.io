<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xuaii.github.io</id>
    <title>Island and Winds</title>
    <updated>2022-11-06T21:55:40.903Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xuaii.github.io"/>
    <link rel="self" href="https://xuaii.github.io/atom.xml"/>
    <subtitle>记录学习和生活 💕</subtitle>
    <logo>https://xuaii.github.io/images/avatar.png</logo>
    <icon>https://xuaii.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Island and Winds</rights>
    <entry>
        <title type="html"><![CDATA[一个基于内网穿透的网络房间]]></title>
        <id>https://xuaii.github.io/post/yi-ge-ji-yu-nei-wang-chuan-tou-de-wang-luo-fang-jian/</id>
        <link href="https://xuaii.github.io/post/yi-ge-ji-yu-nei-wang-chuan-tou-de-wang-luo-fang-jian/">
        </link>
        <updated>2022-10-26T19:45:30.000Z</updated>
        <content type="html"><![CDATA[<p>突发奇想，希望做一个P2P的应用，应该是快速和低延迟的，或许用于传输文件，或许用于语音，聊天。<br>
使用 c++   zmq 来实现内网穿透和数据传输，然后以广播模式将数据广播。使用 python 写处理数据的线程。</p>
<h2 id="房间">房间</h2>
<p>房间的实体在服务端，客户端可以使用命令创建房间，服务端返回房间号。将房间号分享给另一个客户端，另一个客户端使用命令加入房间。</p>
<p>成功加入房间后的客户端开启两个新的线程（接受/发送）。在 python 端实现具体的协议。<br>
房间可以设置模式</p>
<ol>
<li>1 v 1 模式，两个客户端，相互发送信息</li>
<li>n v n 模式，这个处理比较复杂<br>
如果共有 n 个客户端在房间中，那么每个客户端的发送线程都是广播，每个客户端需要有 n - 1个接受线程（有点离谱了，卧槽），如果是基于服务器的，那么应该在服务器端实现数据综合，但是 p2p要么选择一个主客户端充当服务器，要么就硬转发。（tips:先实现1v1模式吧</li>
</ol>
<p>首先需要使用可靠传输，并且是基于 UDP 的可靠传输，那么就不能使用 ZMQ(base on TCP)<br>
修改方案为：<br>
那就不保证可靠传输，而是基于 UDP 在python 端实现可靠传输，为了实现跨平台 socket 库使用 别人封装好的 <a href="https://github.com/simondlevy/CppSockets">CppSockets</a></p>
<pre><code class="language-c++">Client:
socket_recv ----&gt; zmq_broadcast ----&gt; python_recv
                                          |
                                          |
                                          v
socket_send----&gt; zmq_recv  --------&gt; python_reply

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[转载] P2P内网穿透技术]]></title>
        <id>https://xuaii.github.io/post/zhuan-zai-p2p-nei-wang-chuan-tou-ji-zhu/</id>
        <link href="https://xuaii.github.io/post/zhuan-zai-p2p-nei-wang-chuan-tou-ji-zhu/">
        </link>
        <updated>2022-10-26T16:02:53.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://evilpan.com/2015/10/31/p2p-over-middle-box/">原文</a><br>
当今互联网到处存在着一些中间件(Middle Boxes),如NAT和防火墙,导致两个(不在同一内网)中的客户端无法直接通信. 这些问题即便是到了IPV6时代也会存在,因为即使不需要NAT,但还有其他中间件如防火墙阻挡了链接的建立. 目前部署的中间件多都是在C/S架构上设计的,其中相对隐匿的客户机主动向周知的服务端(拥有静态IP地址和DNS名称)发起链接请求. 大多数中间件实现了一种非对称的通讯模型,即内网中的主机可以初始化对外的链接,而外网的主机却不能初始化对内网的链接, 除非经过中间件管理员特殊配置.</p>
<h2 id="前言">前言</h2>
<p>在中间件为常见的NAPT的情况下（也是本文主要讨论的）,内网中的客户端没有单独的公网IP地址, 而是通过NAPT转换,和其他同一内网用户共享一个公网IP. 这种内网主机隐藏在中间件后的不可访问性对于一些客户端软件如浏览器来说 并不是一个问题,因为其只需要初始化对外的链接,从某方面来看反而还对隐私保护有好处. 然而在P2P应用中, 内网主机（客户端）需要对另外的终端（Peer）直接建立链接,但是发起者和响应者可能在不同的中间件后面, 两者都没有公网IP地址. 而外部对NAT公网IP和端口主动的链接或数据都会因内网未请求被丢弃掉. 本文讨论的就是如何跨越NAT实现内网主机直接通讯的问题.</p>
<h2 id="一些术语">一些术语</h2>
<h3 id="防火墙firewall">防火墙(Firewall)</h3>
<p>防火墙主要限制内网和公网的通讯,通常丢弃未经许可的数据包. 防火墙会检测(但是不修改)试图进入内网数据包的IP地址和TCP/UDP端口信息.</p>
<h3 id="网络地址转换器nat">网络地址转换器(NAT)</h3>
<p>NAT不止检查进入数据包的头部,而且对其进行修改,从而实现同一内网中不同主机共用更少的公网IP（通常是一个）.</p>
<h3 id="基本natbasic-nat">基本NAT(Basic NAT)</h3>
<p>基本NAT会将内网主机的IP地址映射为一个公网IP,不改变其TCP/UDP端口号. 基本NAT通常只有在当NAT有公网IP池的时候才有用.</p>
<h3 id="网络地址-端口转换器napt">网络地址-端口转换器(NAPT)</h3>
<p>到目前为止最常见的即为NAPT,其检测并修改出入数据包的IP地址和端口号,从而允许多个内网主机同时共享一个公网IP地址.</p>
<h3 id="锥形natcone-nat">锥形NAT(Cone NAT)</h3>
<p>在建立了一对（公网IP,公网端口）和（内网IP,内网端口）二元组的绑定之后,只要还有一个会话还是激活的,Cone NAT会重用这组绑定用于接下来该应用程序的所有会话（同一内网IP和端口）. 例如,假设客户端A建立了两个连续的对外会话,从相同的内部端点（10.0.0.1:1234）到两个不同的外部服务端S1和S2. Cone NAT只为两个会话映射了一个公网端点（155.99.25.11:62000）, 确保客户端端口的“身份”在地址转换的时候保持不变. 由于基本NAT和防火墙都不改变数据包的端口号,因此这些类型的中间件也可以看作是退化的Cone NAT.</p>
<pre><code class="language-c~~">    Server S1                                     Server S2
18.181.0.31:1235                              138.76.29.7:1235
       |                                             |
       |                                             |
       +----------------------+----------------------+
                              |
  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^
  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |
  v 155.99.25.11:62000 v      |      v 155.99.25.11:62000 v
                              |
                           Cone NAT
                         155.99.25.11
                              |
  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^
  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |
  v   10.0.0.1:1234    v      |      v   10.0.0.1:1234    v
                              |
                           Client A
                        10.0.0.1:1234
</code></pre>
<p>其中Cone NAT根据NAT如何接收已经建立的（公网IP,公网端口）对的输入数据还可以细分为以下三类：</p>
<h4 id="1-全锥形natfull-cone-nat">1. 全锥形NAT(Full Cone NAT)</h4>
<p>在一个新会话建立了公网/内网端口绑定之后,全锥形NAT接下来会接受对应公网端口的所有数据,无论是来自哪个（公网）终端. 全锥NAT有时候也被称为“混杂”NAT（promiscuous NAT）.</p>
<h4 id="2-受限锥形natrestricted-cone-nat">2. 受限锥形NAT(Restricted Cone NAT)</h4>
<p>受限锥形NAT只会转发符合某个条件的输入数据包. 条件为：外部（源）IP地址匹配内网主机之前发送一个或多个数据包的结点的IP地址. AT通过限制输入数据包为一组“已知的”外部IP地址,有效地精简了防火墙的规则.</p>
<h4 id="3-端口受限锥形natport-restricted-cone-nat">3. 端口受限锥形NAT(Port-Restricted Cone NAT)</h4>
<p>端口受限锥形NAT也类似,只当外部数据包的IP地址和端口号都匹配内网主机发送过的地址和端口号时才进行转发. 端口受限锥形NAT为内部结点提供了和对称NAT相同等级的保护,以隔离未关联的数据.</p>
<h4 id="4-对称natsymmetric-nat">4. 对称NAT(Symmetric NAT)</h4>
<p>对称NAT正好相反,不在所有公网-内网对的会话中维持一个固定的端口绑定. 其为每个新的会话开辟一个新的端口. 如下图所示：</p>
<pre><code class="language-c++">   Server S1                                     Server S2
18.181.0.31:1235                              138.76.29.7:1235
       |                                             |
       |                                             |
       +----------------------+----------------------+
                              |
  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^
  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |
  v 155.99.25.11:62000 v      |      v 155.99.25.11:62001 v
                              |
                         Symmetric NAT
                         155.99.25.11
                              |
  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^
  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |
  v   10.0.0.1:1234    v      |      v   10.0.0.1:1234    v
                              |
                           Client A
                        10.0.0.1:1234
</code></pre>
<h2 id="p2p通信技术">P2P通信技术</h2>
<p>根据客户端的不同,客户端之间进行P2P传输的方法也略有不同,这里介绍了现有的穿越中间件进行P2P通信的几种技术.</p>
<h3 id="中继relaying">中继（Relaying）</h3>
<p>这是最可靠但也是最低效的一种P2P通信实现. 其原理是通过一个有公网IP的服务器中间人对两个内网客户端的通信数据进行中继和转发. 如下图所示：</p>
<pre><code class="language-c++">                       Server S
                          |
                          |
   +----------------------+----------------------+
   |                                             |
 NAT A                                         NAT B
   |                                             |
   |                                             |
Client A                                      Client B
</code></pre>
<p>客户端A和客户端B不直接通信,而是先都与服务端S建立链接,然后再通过S和对方建立的通路来中继传递的数据. 这钟方法的缺陷很明显, 当链接的客户端变多之后,会显著增加服务器的负担,完全没体现出P2P的优势. 但这种方法的好处是能保证成功,因此在实践中也常作为一种备选方案.</p>
<h3 id="逆向链接connection-reversal">逆向链接（Connection reversal）</h3>
<p>第二种方法在当两个端点中有一个不存在中间件的时候有效. 例如,客户端A在NAT之后而客户端B拥有全局IP地址,如下图：</p>
<pre><code class="language-c++">
                            Server S
                        18.181.0.31:1235
                               |
                               |
        +----------------------+----------------------+
        |                                             |
      NAT A                                           |
155.99.25.11:62000                                    |
        |                                             |
        |                                             |
     Client A                                      Client B
  10.0.0.1:1234                               138.76.29.7:1234　
</code></pre>
<p>客户端A内网地址为10.0.0.1,且应用程序正在使用TCP端口1234. A和服务器S建立了一个链接,服务器的IP地址为18.181.0.31,监听1235端口. NAT A给客户端A分配了TCP端口62000,地址为NAT的公网IP地址155.99.25.11, 作为客户端A对外当前会话的临时IP和端口. 因此S认为客户端A就是155.99.25.11:62000. 而B由于有公网地址,所以对S来说B就是138.76.29.7:1234.</p>
<p>当客户端B想要发起一个对客户端A的P2P链接时,要么链接A的外网地址155.99.25.11:62000,要么链接A的内网地址10.0.0.1:1234,然而两种方式链接都会失败. 链接10.0.0.1:1234失败自不用说,为什么链接155.99.25.11:62000也会失败呢？来自B的TCP SYN握手请求到达NAT A的时候会被拒绝,因为对NAT A来说只有外出的链接才是允许的. 在直接链接A失败之后,B可以通过S向A中继一个链接请求,从而从A方向“逆向“地建立起A-B之间的点对点链接.</p>
<p>很多当前的P2P系统都实现了这种技术,但其局限性也是很明显的,只有当其中一方有公网IP时链接才能建立. 越来越多的情况下, 通信的双方都在NAT之后,因此就要用到我们下面介绍的第三种技术了.</p>
<h3 id="udp打洞udp-hole-punching">UDP打洞（UDP hole punching）</h3>
<p>第三种P2P通信技术,被广泛采用的,名为“P2P打洞“. P2P打洞技术依赖于通常防火墙和Cone NAT允许正当的P2P应用程序在中间件中打洞且与对方建立直接链接的特性. 下面主要考虑两种常见的场景,以及应用程序如何设计去完美地处理这些情况. 第一种场景代表了大多数情况,即两个需要直接链接的客户端处在两个不同的NAT之后； 第二种场景是两个客户端在同一个NAT之后,但客户端自己可能并不知道(比如同一ISP下面的不同子网).</p>
<h4 id="端点在不同的nat之后">端点在不同的NAT之后</h4>
<p>假设客户端A和客户端B的地址都是内网地址,且在不同的NAT后面. A、B上运行的P2P应用程序和服务器S都使用了UDP端口1234,A和B分别初始化了 与Server的UDP通信,地址映射如图所示:</p>
<pre><code class="language-c++">                            Server S
                        18.181.0.31:1234
                               |
                               |
        +----------------------+----------------------+
        |                                             |
      NAT A                                         NAT B
155.99.25.11:62000                            138.76.29.7:31000
        |                                             |
        |                                             |
     Client A                                      Client B
  10.0.0.1:1234                                 10.1.1.3:1234
</code></pre>
<p>现在假设客户端A打算与客户端B直接建立一个UDP通信会话. 如果A直接给B的公网地址138.76.29.7:31000发送UDP数据,NAT B将很可能会无视进入的 数据（除非是Full Cone NAT）,因为源地址和端口与S不匹配,而最初只与S建立过会话. B往A直接发信息也类似.</p>
<p>假设A开始给B的公网地址发送UDP数据的同时,给服务器S发送一个中继请求,要求B开始给A的公网地址发送UDP信息. A往B的输出信息会导致NAT A打开 一个A的内网地址与与B的外网地址之间的新通讯会话,B往A亦然. 一旦新的UDP会话在两个方向都打开之后,客户端A和客户端B就能直接通讯, 而无须再通过引导服务器S了.</p>
<p>UDP打洞技术有许多有用的性质. 一旦一个的P2P链接建立,链接的双方都能反过来作为“引导服务器”来帮助其他中间件后的客户端进行打洞, 极大减少了服务器的负载. 应用程序不需要知道中间件具体是什么（如果有的话）,因为以上的过程在没有中间件或者有多个中间件的情况下 也一样能建立通信链路.</p>
<h4 id="端点在相同的nat之后">端点在相同的NAT之后</h4>
<p>现在考虑这样一种情景,两个客户端A和B正好在同一个NAT之后（而且可能他们自己并不知道）,因此在同一个内网网段之内. 客户端A和服务器S建立了一个UDP会话,NAT为此分配了公网端口62000,B同样和S建立会话,分配到了端口62001,如下图：</p>
<pre><code class="language-c++">                          Server S
                      18.181.0.31:1234
                             |
                             |
                            NAT
                   A-S 155.99.25.11:62000
                   B-S 155.99.25.11:62001
                             |
      +----------------------+----------------------+
      |                                             |
   Client A                                      Client B
10.0.0.1:1234                                 10.1.1.3:1234
</code></pre>
<p>假设A和B使用了上节介绍的UDP打洞技术来建立P2P通路,那么会发生什么呢？首先A和B会得到由S观测到的对方的公网IP和端口号,然后给对方的地址发送信息. 两个客户端只有在NAT允许内网主机对内网其他主机发起UDP会话的时候才能正常通信,我们把这种情况称之为&quot;回环传输“(loopback transmission),因为从内部 到达NAT的数据会被“回送”到内网中而不是转发到外网. 例如,当A发送一个UDP数据包给B的公网地址时,数据包最初有源IP地址和端口地址10.0.0.1:1234和 目的地址155.99.25.11:62001,NAT收到包后,将其转换为源155.99.25.11:62000（A的公网地址）和目的10.1.1.3:1234,然后再转发给B. 即便NAT支持 回环传输,这种转换和转发在此情况下也是没必要的,且有可能会增加A与B的对话延时和加重NAT的负担.</p>
<p>对于这个情况,优化方案是很直观的. 当A和B最初通过S交换地址信息时,他们应该包含自身的IP地址和端口号（从自己看）,同时也包含从服务器看的自己的 地址和端口号. 然后客户端同时开始从对方已知的两个的地址中同时开始互相发送数据,并使用第一个成功通信的地址作为对方地址. 如果两个客户端在同一个 NAT后,发送到对方内网地址的数据最有可能先到达,从而可以建立一条不经过NAT的通信链路；如果两个客户端在不同的NAT之后,发送给对方内网地址的数据包 根本就到达不了对方,但仍然可以通过公网地址来建立通路. 值得一提的是,虽然这些数据包通过某种方式验证,但是在不同NAT的情况下完全有可能会导致A往B 发送的信息发送到其他A内网网段中无关的结点上去的.</p>
<h4 id="端点在多级nat之后">端点在多级NAT之后</h4>
<p>在一些拓朴结构中,可能会存在多级NAT设备,在这种情况下,如果没有关于拓朴的具体信息, 两个Peer要建立“最优”的P2P链接是不可能的,下面来说为什么. 以下图为例：</p>
<pre><code class="language-c++">                            Server S
                        18.181.0.31:1234
                               |
                               |
                             NAT X
                     A-S 155.99.25.11:62000
                     B-S 155.99.25.11:62001
                               |
                               |
        +----------------------+----------------------+
        |                                             |
      NAT A                                         NAT B
192.168.1.1:30000                             192.168.1.2:31000
        |                                             |
        |                                             |
     Client A                                      Client B
  10.0.0.1:1234                                 10.1.1.3:1234
</code></pre>
<p>假设NAT X是一个网络提供商ISP部署的工业级NAT,其下子网共用一个公网地址155.99.25.11,NAT A和NAT B分别是其下不同用户的网关部署的NAT. 只有服务器S 和NAT X有全局的路由地址. Client A在NAT A的子网中,同时Client B在NAT B的子网中,每经过一级NAT都要进行一次网络地址转换.</p>
<p>现在假设A和B打算建立直接P2P链接,用一般的方法（通过Server S来打洞）自然是没问题的,那能不能优化呢？一种想当然的优化办法是A直接把信息发送给NAT B的 内网地址192.168.1.2:31000,且B通过NAT B把信息发送给A的路由地址192.168.1.1:30000,不幸的是,A和B都没有办法得知这两个目的地址,因为S只看见了客户端 ‵全局‵地址155.99.25.11. 退一步说,即便A和B通过某种方法得知了那些地址,我们也无法保证他们是可用的. 因为ISP分配的子网地址可能和NAT A B分配的子网地址 域相冲突. 因此客户端没有其他选择,只能使用S来进行打洞并进行回环传输.</p>
<h3 id="固定端口绑定">固定端口绑定</h3>
<p>UDP打洞技术有一个主要的条件：只有当两个NAT都是Cone NAT（或者非NAT的防火墙）时才能工作. 因为其维持了一个给定的（内网IP,内网UDP）二元组 和（公网IP, 公网UDP）二元组固定的端口绑定,只要该UDP端口还在使用中,就不会变化. 如果像对称NAT一样,给每个新会话分配一个新的公网端口,就 会导致UDP应用程序无法使用跟外部端点已经打通了的通信链路. 由于Cone NAT是当今最广泛使用的,尽管有一小部分的对称NAT是不支持打洞的,UDP打洞 技术也还是被广泛采纳应用.</p>
<h2 id="具体实现">具体实现</h2>
<p>一般的网络编程,都是客户端比服务端要难,因为要处理与服务器的通信同时还要处理来自用户的事件；对于P2P客户端来说更是如此,因为P2P客户端不止作 为客户端,同时也作为对等连接的服务器端. 这里的大体思路是,输入命令传输给服务器之后,接收来自服务器的反馈,并执行相应代码. 例如A想要与B建立 通信链路,先给服务器发送punch命令以及给B发送数据,服务器接到命令后给B发送punch_requst信息以及A的端点信息,B收到之后向A发送数据打通通路,然 后A与B就可以进行P2P通信了. 经测试,打通通路后即便把服务器关闭,A与B也能正常通信.</p>
<p>一个UDP打洞的例子见P2P-Over-MiddleBoxes-Demo</p>
<h2 id="tcp打洞tcp-hole-punching">TCP打洞(TCP Hole Punching)</h2>
<p>关于TCP打洞,有一点需要提的是,因为TCP是基于连接的,所以任何未经连接而发送的数据都会被丢弃,这导致在recv的时候是无法直接从peer端读取数据. 其实这对UDP也一样,如果对UDP的socket进行了connect,其也会忽略连接之外的数据,详见connect(2).</p>
<p>所以,如果我们要进行TCP打洞,通常需要重用本地的endpoint来发起新的TCP连接,这样才能将已经打开的NAT利用起来. 具体来说,则是要设置socket的 SO_REUSEADDR或SO_REUSEPORT属性,根据系统不同,其实现也不尽一致. 一般来说,TCP打洞的步骤如下：</p>
<p>A 发送 SYN 到 B(出口地址,下同）,从而创建NAT A的一组映射<br>
B 发送 SYN 到 A, 创建NAT B的一组映射<br>
根据时序不同,两个SYN中有一个会被对方的NAT丢弃,另一个成功通过NAT<br>
通过NAT的SYN报文被其中一方收到,即返回SYNACK, 完成握手<br>
至此,TCP的打洞成功,获得一个不依赖于服务器的链接<br>
由于TCP连接是由操作系统控制的, 而不是由应用控制的, 而且TCP包的序列号是随机生成, 所以TCP打洞的成功率就相对较低. 因此如果NAT对接收到的包进行TCP序列号检测时若没有现有的连接可以对应, 该TCP包很可能会被NAT丢弃掉.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[AI] 将复杂计算放到外部计算设备]]></title>
        <id>https://xuaii.github.io/post/ai-zi-miao-jiang-fu-za-ji-suan-fang-dao-wai-bu-ji-suan-she-bei/</id>
        <link href="https://xuaii.github.io/post/ai-zi-miao-jiang-fu-za-ji-suan-fang-dao-wai-bu-ji-suan-she-bei/">
        </link>
        <updated>2022-10-16T16:54:07.000Z</updated>
        <content type="html"><![CDATA[<p>由于本机需要运行游戏进程，再额外运行神经网络，这样做非常卷，所以使用一台额外的计算机来推理（在网吧直接开两台电脑🤡）<br>
现在有两种数据传输的方案：</p>
<h3 id="使用采集卡">使用采集卡</h3>
<p>能采集高帧率画面的采集卡售价已经超过1000RMB了，所以很不划算<br>
将游戏主机记为 A，推理主机记为 B，该方案，A 只需要运行一个控制鼠标移动的小程序（几乎没有消耗，可以直接纯 Python实现），主机 A 需要捕获采集卡的视频，并且进行推理，将目标列表数据通过 TCP/UDP 传输到主机A。两台主机需要通过<strong>采集卡</strong>和<strong>RJ45</strong>连接</p>
<h3 id="进程间通信的方式">进程间通信的方式</h3>
<p>优点是成本低，只用连接一根网线，缺点是速度可能会慢）<br>
该方法在主机A运行<strong>屏幕捕获和鼠标更新</strong>进程，在主机B运行推理进程</p>
<p>A-&gt;B : 剪裁后的 cv::Mat (320 x 320)<br>
B-&gt;A : 鼠标控制数据<br>
以 90 fps的推理速度来计算</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mo>=</mo><mfrac><mrow><mn>90</mn><mo>×</mo><mn>320</mn><mo>×</mo><mn>320</mn><mo>×</mo><mn>24</mn></mrow><mn>8</mn></mfrac><mo>=</mo><mn>27</mn><mo separator="true">,</mo><mn>648</mn><mo separator="true">,</mo><mn>000</mn><mo>(</mo><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>)</mo><mo>=</mo><mn>27</mn><mo separator="true">,</mo><mn>000</mn><mo>(</mo><mi>K</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>)</mo><mo>=</mo><mn>26.4</mn><mo>(</mo><mi>M</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">data = \frac{90  \times 320 \times 320 \times 24}{8} =  27,648,000(B/s)=27,000(KB/s) = 26.4(MB/s)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mord">.</span><span class="mord">4</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span></span></p>
<p>所以进程间 以网线连接 使用UDP 通信，需要保证26.4 MB/s 的上传速度，不清楚这会不会导致过度占用网卡，导致游戏进程掉包</p>
<p>本地两台 PC 之间的传输时延低于 1ms， 对于本应用可以忽略不计<br>
我们考虑每一帧的情况</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>×</mo><mn>320</mn><mo>×</mo><mn>320</mn><mo>×</mo><mn>24</mn></mrow><mn>8</mn></mfrac><mo>=</mo><mn>307</mn><mo separator="true">,</mo><mn>200</mn><mo>(</mo><mi>B</mi><mi mathvariant="normal">/</mi><mi>f</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>)</mo><mo>=</mo><mn>300</mn><mo>(</mo><mi>K</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>f</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>)</mo><mo>=</mo><mn>0.293</mn><mo>(</mo><mi>M</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>f</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">data = \frac{1  \times 320 \times 320 \times 24}{8} =  307,200(B/frame)=300(KB/frame) = 0.293(MB/frame)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mord">9</span><span class="mord">3</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></span></p>
<p>传输方法</p>
<pre><code class="language-c++">// send
 Mat img = imread(&quot;img/1.jpg&quot;);
int imgSize = img.cols*img.rows*img.channels();
char *pos = (char*)img.data;
int total = 0;
while (total &lt; imgSize)
{
    int sizelen = send(sockfd, pos+total, imgSize-total, 0);
    total = total + sizelen;
}
// recieve
 if ((connfd = accept(listenfd, (struct sockaddr*)NULL, NULL)) == -1)
{
    printf(&quot;accept socket error: %s(errno: %d)&quot;,strerror(errno),errno);
}
char buf[320 * 320 * 3]; // 图片宽高
memset(buf, 0, sizeof(buf));
int total = 0;
while(total &lt; 320 * 320 * 3)
{
    long len = recv(connfd, buf+total, 320 * 320 * 3-total, 0); // 注意偏移量
    total = total + len;
}
cout &lt;&lt; &quot;接收长度为: &quot; &lt;&lt; total &lt;&lt; endl;
Mat img(320 * 320, CV_8UC3, buf);
</code></pre>
<p>在开始开发之前需要测试<strong>网络和性能瓶颈</strong><br>
时延计算</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>D</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo>=</mo><mi>g</mi><mi>r</mi><mi>a</mi><mi>b</mi><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>+</mo><mi>c</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>+</mo><mi>T</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>T</mi><mi>i</mi><mi>m</mi><msub><mi>e</mi><mn>1</mn></msub><mo>+</mo><mi>I</mi><mi>n</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>+</mo><mi>T</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>T</mi><mi>i</mi><mi>m</mi><msub><mi>e</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">timeDelay = grabTime + cropTime + TransportTime_1 + InferenceTime + TransportTime_2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>使用一个ZeroMQ 的头文件only版本就行了（非常方便）<br>
这样就能单机运行和多机运行了（设置启动脚本即可）<br>
tips:</p>
<ol>
<li>cppzmq 只是一个 c++ 的wrapper，其本质还是 基于c 的libzmq</li>
<li>使用cppzmq 需要先编译 libzmq，并且将 libzmq/include/zmq.h 和 cppzmq/* 添加到包含目录</li>
<li>将 libzmq/&lt;build_dir&gt;/lib/添加到库目录</li>
<li>将以下文件作为链接器输入<br>
wsock32.lib<br>
ws2_32.lib<br>
Iphlpapi.lib<br>
libzmq-v143-mt-s-4_3_5.lib<br>
libzmq-v143-mt-4_3_5.exp<br>
testutil.lib<br>
testutil-static.lib<br>
unity.lib</li>
</ol>
<p>经过测试，使用 cppzmq 在本地计算机能完成 1ms 内的数据传输，目标数据的传输需要使用 json 进行序列化！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ 矩阵库Eigen3学习]]></title>
        <id>https://xuaii.github.io/post/c-ju-zhen-ku-eigen3-xue-xi/</id>
        <link href="https://xuaii.github.io/post/c-ju-zhen-ku-eigen3-xue-xi/">
        </link>
        <updated>2022-10-08T06:49:42.000Z</updated>
        <content type="html"><![CDATA[<p>上来第一个Demo我就没看懂</p>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;Eigen/Dense&gt;
 
using Eigen::MatrixXd;
using Eigen::VectorXd;
 
int main()
{
  MatrixXd m = MatrixXd::Random(3,3);
  m = (m + MatrixXd::Constant(3,3,1.2)) * 50;
  std::cout &lt;&lt; &quot;m =&quot; &lt;&lt; std::endl &lt;&lt; m &lt;&lt; std::endl;
  VectorXd v(3);
  v &lt;&lt; 1, 2, 3; // 这是一个很方便的实现
  std::cout &lt;&lt; &quot;m * v =&quot; &lt;&lt; std::endl &lt;&lt; m * v &lt;&lt; std::endl;
}
</code></pre>
<p>这里的 v &lt;&lt; 1, 2, 3; 是什么原理，&lt;&lt; 操作符的优先级比逗号表达式的优先级更高，所以是怎么实现的呢？查阅资料后发现，原来是相当 v&lt;&lt;1; v&lt;&lt;2; v&lt;&lt;3; 下面是具体实现：</p>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

template &lt;typename T&gt;
class DemoVector:public vector&lt;T&gt;
{
private:
    class CommaInputWapper
    {
    public:
        CommaInputWapper()=delete;
        explicit CommaInputWapper(DemoVector&lt;T&gt;* const sp):_sp(sp){}
        CommaInputWapper&amp; operator,(const T&amp; val)
        {
            _sp-&gt;push_back(val);
            return *this;
        }
    private:
        DemoVector&lt;T&gt;* const _sp;
    };
public:
    DemoVector()=default;
    CommaInputWapper operator&lt;&lt;(const T&amp; val)
    {
        vector&lt;T&gt;::clear();
        vector&lt;T&gt;::push_back(val);
        return CommaInputWapper(this);
    }

};

template &lt;typename T&gt;
ostream&amp; operator&lt;&lt;(ostream&amp; out,const vector&lt;T&gt;&amp; v)
{
    if(!v.empty())
        out&lt;&lt;v[0];
    for(typename vector&lt;T&gt;::size_type i=1; i&lt;v.size(); ++i)
    {
        out&lt;&lt;&quot; &quot;&lt;&lt;v[i];
    }
    return out;
}

int main()
{
    DemoVector&lt;int&gt; dv1;
    dv1&lt;&lt;1,2,3,4,5,6;
    cout&lt;&lt;dv1&lt;&lt;endl;  
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[云云] 游戏 BOSS AI 设计]]></title>
        <id>https://xuaii.github.io/post/yun-yun-you-xi-boss-ai-she-ji/</id>
        <link href="https://xuaii.github.io/post/yun-yun-you-xi-boss-ai-she-ji/">
        </link>
        <updated>2022-10-07T05:03:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>最近听朋友吹了一下魂系列游戏的BOSS，它读指令，会预判，会假动作。但是在多次重复的对战中依然会暴露出一些特定的行为模式，这是因为传统AI设计依然依赖于<strong>静态结构的状态机和行为树</strong>。并且这样的 AI 设计确实能让BOSS 看起来不笨，但受限于静态结构需要人为设计AI 结构，AI的复杂度提升意味着更多的时间投入。<br>
对于低成本游戏来说这简直是天方夜谭。前段时间做了 FPS AIM AI，看到了我最爱的 FPS 游戏被 AI毁掉的未来，但是 AI 在游戏方面除了替代人类，就不能带来更好的游戏体验么？于是萌生了一个<strong>利用机器学习生成更加聪明和捉摸不透的 BOSS</strong> 的想法。<br>
诚然，游戏 BOSS 不应该只需要捉摸不透和聪明，每个 BOSS 需要有他独特的品质，比如阴险狡诈的BOSS会在使用很多阴招，类似火影中<strong>斑</strong>这样的 BOSS 就只能用一些正面的攻击，诸如此类的讨论太多太杂，我想一次解决一个问题，仅仅是让 AI 更聪明，如果 AI  能学习对战数据，那么跟着枭雄能学到枭雄的对战方式，跟着小人能学到小人的阴险技巧。</p>
<h3 id="进一步思考">进一步思考</h3>
<p><strong>战斗实体</strong><br>
需要实现两个<strong>可操作</strong>，<strong>可对战</strong> 的游戏角色，因为需要记录对战数据集，所以即使是 BOSS 也不能仅仅设计程序驱动的API，它需要被设计成一个既能被程序控制，也能被玩家控制的实体，也就是说对于对战实体，我们需要约定一组通用的<strong>操作接口</strong>（可以是状态切换方式）。</p>
<p><strong>战斗环境</strong><br>
需要设计和记录一组 AI 可采集的<strong>环境变量</strong>，例如目前所处的位置信息，周围的掩体信息，可用技能信息，敌人位置信息，敌人可用技能信息等，这些信息将在每一次有效决策前被记录（例如连续移动，闪避，使用技能等），需要将采集到的信息进行某种编码，这种编码能归一化各个环境变量的scale并且能有效表达其对应的<strong>战场信息</strong>，这种编码的设计关系到 AI 是否能在堆栈中学习到东西</p>
<p><strong>训练数据</strong><br>
将一场对战的所有环境信息和决策信息按时间轴顺序排列，得到一场对战的数据集，我们需要设计一种机器学习结构在其中学习到有用的信息并且能表现数据集的特征，还有一个重要的目标是胜利，游戏对战不像是回合制的博弈，我们的每一个决策来带的<strong>局部胜利会很大的影响最终的战斗结果</strong>，所以衡量一场战斗的损失不能单单从结果考虑，而应该结合战斗过程中每一步，或者间隔几步的损失。</p>
<p><strong>随机性</strong><br>
为了使得战斗更加丰富，我们需要为模型增加随机因素，并且为玩家的环境信息添加更多的权重（使得不同玩家更可能得到不同的游戏体验。</p>
<h3 id="实现难点">实现难点</h3>
<ol>
<li>通用接口，这意味着即使是 BOSS 也需要设计等同于玩家的复杂的<strong>动画状态机</strong>，并且通过一个同等复杂的状态机来约束各个状态之间的转换</li>
<li>如何编码战斗环境状态？如何表达战斗实体之间的距离？如何表达实体之间的障碍物？如何表达实体的可移动空间大小？如何过滤无效操作？如何编码编码各个技能，使得模型感知到不同技能的不同作用？如何编码对战实体状态（血量，药物，技能储备等）。更进一步说按照游戏设计的角度，包括距离，优势位置，障碍，血量，技能，物品 都被当作资源看待，那么编码问题就转换为 <strong>如何统一的表达游戏资源</strong>？</li>
<li>学习模型的设计，首先内嵌于游戏的深度学习推理模型应该占用更小的内存和计算资源，所以不能采用复杂的计算模型，应该采用传统机器学习方法 / 轻量的深度学习方法？？（这里我不太懂，需要做一下调研，什么样的学习模型适合对战游戏）</li>
</ol>
<h3 id="实现细节">实现细节</h3>
<p>// 云云的就等考研完之后，复习一下机器学习相关的算法再继续云了。<br>
// 或许先学学强化学习相关的方法？？<br>
// c# 有一个 ML.NET 所以可以实现平台无关的方案（unity， godot， 。。 只要使用c#的引擎都通用，或者使用 C++来做，这样几乎所有引擎都通用）<br>
// c++机器学习库：<a href="https://www.mlpack.org/">mlpack</a>, 矩阵库：Eigen3， 并行后端 openCL，CUDA   线性代数库：ViennaCL，Armadillo， 数值优化库 ensmallen， 序列化库cereal</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[GUI 框架] imGUI in c++]]></title>
        <id>https://xuaii.github.io/post/gui-kuang-jia-imgui-in-c/</id>
        <link href="https://xuaii.github.io/post/gui-kuang-jia-imgui-in-c/">
        </link>
        <updated>2022-10-01T20:49:42.000Z</updated>
        <content type="html"><![CDATA[<p>imgui 是一个轻量级UI框架，常用于游戏引擎，这是我一直很喜欢的一个 UI 框架，但是一直没有机会学习，趁这次机会 上手操作一下<br>
之前做了 AI 自瞄，界面不太灵活，虽然实现了python脚本系统，但是并没有实现热重载，并且软件启动时需要分配 GPU 内存，重复的启动再关闭开销很大。为了用户能更好地配置参数和测试，需要一个UI：</p>
<ol>
<li>显示系统输出消息</li>
<li>python 模块热重载功能</li>
<li>暂停启动功能</li>
</ol>
<p>UI 和 AI 将运行在两个线程，UI线程仅提供控制功能<br>
UI界面</p>
<ol>
<li>整体呈现命令行窗口的样式</li>
<li>主要区域用于实现指令：
<ul>
<li>开始，暂停，结束指令</li>
<li>重载脚本指令</li>
<li>调整参数指令</li>
<li>更换模型指令</li>
</ul>
</li>
<li>然后有一个附窗口用于实现 <strong>视频展示</strong>， <strong>是否开启视频展示</strong>，<strong>目标检测状态显示</strong></li>
</ol>
<p>UI 窗口仅仅负责发送指令</p>
<p>其中，仅仅在开启 / 暂停状态显示 AI 状态和视频窗口</p>
<p>设置一个结构来控制当前程序状态，启动窗口后启动线程</p>
<pre><code class="language-c++">struct ProgramState
{
    bool enableInference;
    bool enablePreview;
    bool enableScript;
    bool reloadScript;
    bool reloadModel;
}
</code></pre>
<p>github 存储库里的 demo 已经很完备了，完全可以参考着写，在此就不过多赘述了，但是要记录一个小坑：<br>
想要实现游戏外 overlay 时，需要将window 的绘制窗口调为透明和不可交互，并且将 ImGUI 的子窗口移动到相同位置，与父窗口分离。<br>
这个隐藏绘制窗口的方法时设置 某种颜色为透明色，并且透明的区域是不可交互的，但是在DX12下时无效的，仅仅在 DX9是有效的（或许是有更好的解决方案，但是我没有找到</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[转载] c++多线程调用python]]></title>
        <id>https://xuaii.github.io/post/zhuan-zai-cduo-xian-cheng-diao-yong-python/</id>
        <link href="https://xuaii.github.io/post/zhuan-zai-cduo-xian-cheng-diao-yong-python/">
        </link>
        <updated>2022-09-21T18:22:50.000Z</updated>
        <content type="html"><![CDATA[<p>脚本语言是快速编写富有弹性的代码的重要方法之一，在 Unix 系统自动化管理中已经应用了多种脚本语言。现在，在许多应用开发中，也提供了脚本层，这大大方便用户实现通用任务自动处理或者编写应用扩展，许多成功的应用，诸如 GIMP、Emacs、MS Office、PhotoShop、AutoCAD 等都应用了脚本技术。在某种意义上，一切皆可脚本化。</p>
<p>在另一篇文章中，我们已经介绍了如何在 C 应用中嵌入 Python 语言，通过这项技术，可以让应用的高级用户来修改或定制化他们的程序，你可以充分利用 Python 的语言能力而不用自己去实现嵌入语言。Python 是一个不错的的选择，因为它提供了干净直观的 C 语言 API。关于如何在 C 应用中嵌入 Python 解释器，你可以参考：让Python成为嵌入式语言一文。</p>
<p>现在我们来更深入地探讨一些问题。 鉴于许多复杂的应用都会利用多线程技术，本文将着重介绍如何创建线程安全的界面来调用Python解释器。</p>
<p>这里的所有例子都是用 Python 2.7.2，所有的 Python 函数都以extern “C”定义，因此对于 C 和 C++，其使用是别无二致的。</p>
<h2 id="python-c-和线程">Python C 和线程</h2>
<p>在C程序中创建执行线程是很简单的。在 Linux 中，通常的做法是使用 POSIX 线程（pthread) API 并调用 pthread_create 函数。关于如何使用 pthreads，你可以参考 Felix Garcia 和Javier Fernandez 著的 “POSIX Thread Libraries”一文。为了支持多线程， Python 使用了互斥使访问内部数据结构串行化。这种互斥即 “全局解释器锁 – global interpreter lock”，当某个线程想使用 Python 的C API的时候，它必须获得 全局解释器锁，这避免了会导致解析器状态崩溃的竞争条件（race condition)。</p>
<p>互斥的锁定和释放是通过 PyEval_AcquireLock 和 Eval_ReleaseLock 来描述的。调用了 PyEval_AcquireLock 之后，可以安全地假定你的线程已经持有了锁，其他相关线程不是被阻塞就是在执行与 Python 解析器无关的代码。现在你可以任意调用 Python 函数了。一旦取得了锁，你必须确保调用 PyEval_ReleaseLock 来释放它，否则就会导致线程死锁并冻结其他 Python 线程。</p>
<p>更复杂的情况是，每个运行 Python 的线程维护着自己的状态信息。这些和特定线程相关的数据存储在称为 PyThreadState 的对象中。当在多线程应用中用 C 语言调用 Python API 函数时，你必须维护自己的 PyThreadState 对象以便能安全地执行并发的 Python 代码。</p>
<p>如果你对开发多线程应用相当有经验，你可能会发现全局解释器锁的概念相当不方便。不过，现在它已经不像首次出现时那样糟糕了。当 Python 对脚本进行解释时，它会定期切换出当前 PyThreadState 对象并释放全局解释器锁，从而将控制权释放给其他线程。之前被阻塞的线程可以试图锁定全局解释器锁从而被运行。有些时候，原来的线程会再次获得全局解释器锁再次切回解释器。</p>
<p>这意味着当调用 PyEval_SimpleString 时，即使你持有全局解释器锁，其他线程仍有机会被执行，这样的副作用无可避免。另外，当你调用以 C 语言写就的 Python 模块（包括许多内置模块） 存在着将控制权释放给其他线程的可能性。基于这个原因，当你用两个 C 线程来执行计算密集的 Python 脚本，它们确实能分享 CPU 时间并发运行，但由于全局解释器锁的存在，在多处理器的计算机上，Python 无法通过线程充分计算机的 CPU 处理能力。</p>
<h2 id="启用线程支持">启用线程支持</h2>
<p>在多线程的 C 程序使用 Python API 之前，必须调用一些初始化例程。如果编译解释器库时启用了多线程支持（通常情况如此），你就有了一个是否启用线程的运行时选项。除非你计划使用线程，否则不建议启用该选项。未启用该选项，Python 可以避免因互斥锁定其内部数据结构而产生的系统开销。但是如果你打算用 Python 来扩展多线程应用，你就需要在初始化解释器的时候启用线程支持。我个人建议，应该在主线程执行时就初始化 Python，最好是在应用程序启动的时候，就调用下面两行代码：</p>
<pre><code class="language-python">// initialize Python
Py_Initialize();
// initialize thread support
PyEval_InitThreads();
</code></pre>
<p>这两个函数都返回 void，所以无需检查错误代码。现在，我们可以假定 Python 解释器已准备好执行 Python 代码。Py_Initialize 分配解释器库使用的全局资源。调用PyEval_InitThreads 则启用运行时线程支持。这导致 Python 启用其内部的互斥锁机制，用于解释器内代码关键部分的系列化访问。此函数的另一个作用是锁定全局解释器锁。该函数完成后，需要由用户负责释放该锁。不过，在释放锁之前, 你应该捕获当前 PyThreadState 对象的指针。后续创建新的 Python 线程以及结束使用 Python 时要正确关闭解释器，都需要用到该对象。下面这段代码用来捕获 PyThreadState 对象指针:</p>
<pre><code class="language-python">PyThreadState * mainThreadState = NULL;
// save a pointer to the main PyThreadState object
mainThreadState = PyThreadState_Get();
// release the lock
PyEval_ReleaseLock();
</code></pre>
<h2 id="创建新的执行线程">创建新的执行线程</h2>
<p>在 Python 里，每个执行 Python 代码的线程都需要一个 PyThreadState 对象。解释器使用此对象来管理每个线程独立的数据空间。理论上，这意味着一个线程中的动作不会牵涉到另一个线程的状态。例如，你在一个线程中抛出异常，其他 Python 代码片段仍会继续运行，就好象什么事情都没有发生一样。你必须帮助 Python 管理每个线程的数据。为此，你需要为每个执行 Python 代码的 C 线程手工创建一个 PyThreadState 对象.要创建 PyThreadState 对象，你需要用到既有的 PyInterpreterState 对象。PyInterpreterState 对象带有为所有参与的线程所共享的信息。当你初始化 Python 时，它就会创建一个 PyInterpreterState 对象，并将它附加在主线程的 PyThreadState 对象上。你可以使用该解释器对象为你自己的 C 现成创建新的 PyThreadState。请参考下面代码</p>
<pre><code class="language-python">// get the global lock
PyEval_AcquireLock();
// get a reference to the PyInterpreterState
PyInterpreterState * mainInterpreterState = mainThreadState-&gt;interp;
// create a thread state object for this thread
PyThreadState * myThreadState = PyThreadState_New(mainInterpreterState);
// free the lock
PyEval_ReleaseLock();
</code></pre>
<h2 id="执行-python-代码">执行 Python 代码</h2>
<p>现在我们已创建 PyThreadState 对象，你的 C 线程就可以开始使用 Python API 执行 Python 脚本。从 C 线程执行 Python 代码时，你必须遵守一些简单的规则。首先，您在进行任何会改变当前线程状态的操作前必须持有全局解释器锁。第二，必须在执行任何 Python 代码之前，必须将该线程特定的 PyThreadState 对象加载到解释器。一旦您已经满足这些条件，您可以通过诸如 PyEval_SimpleString 函数来执行任意的 Python 代码，并记得在执行结束时切出 PyThreadState 对象并释放全局解释器锁。请参考下面代码，注意代码中“锁定、 切换、 执行、 切换，解锁”的对称关系：</p>
<pre><code class="language-python">// grab the global interpreter lock
PyEval_AcquireLock();
// swap in my thread state
PyThreadState_Swap(myThreadState);
// execute some python code
PyEval_SimpleString(&quot;import sys\n&quot;);
PyEval_SimpleString(&quot;sys.stdout.write(‘Hello from a C thread!\n‘)\n&quot;);
// clear the thread state
PyThreadState_Swap(NULL);
// release our hold on the global interpreter
PyEval_ReleaseLock();
</code></pre>
<h2 id="清除线程">清除线程</h2>
<p>一旦你的 C 线程不再需要 Python 解释器，你必须释放相关资源。为此，需要删除该线程的 PyThreadState 对象，相关代码如下：</p>
<pre><code class="language-python">// grab the lock
PyEval_AcquireLock();
// swap my thread state out of the interpreter
PyThreadState_Swap(NULL);
// clear out any cruft from thread state object
PyThreadState_Clear(myThreadState);
// delete my thread state object
PyThreadState_Delete(myThreadState);
// release the lock
PyEval_ReleaseLock();
</code></pre>
<p>通过使用 Python API ，这个线程很有效率地完成了上述工作。现在你可以安全地调用 pthread_ext 来结束该线程的运行。</p>
<h2 id="关闭解释器">关闭解释器</h2>
<p>一旦应用不在需要 Python 解释器，你可以用下面的代码将 Python 关闭掉：</p>
<pre><code class="language-python">// shut down the interpreter
PyEval_AcquireLock();
Py_Finalize();
</code></pre>
<p>注意：因为 Python 已经被关系，这里就不需要释放锁。请确保在调用 Py_Finalize 之前用 PyThreadState_Clear 和 PyThreadState_Delete 删除掉所有线程状态对象。</p>
<h2 id="小结">小结：</h2>
<p>作为嵌入式语言，Python 是一个不错的选择。Python 解释器同时支持嵌入和扩展，它允许 C 应用程序代码和嵌入的 Python 脚本之间的双向通信。此外，多线程支持促进了与多线程应用程序的集成，而且不影响性能。</p>
<p>你可以从本文的后面下载有关案例Python embedded HTTP Server (29)，该案例实现了一个内嵌 Python 解释器的多线程 HTTP 服务器。此外我推荐您去 http://www.python.org/docs/api/ 阅读有关的 Python C API 文档。另外 Python 解释器本身的代码也是一个很有价值的参考。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[AI] Auxiliary positioning and tracker]]></title>
        <id>https://xuaii.github.io/post/you-xi-wai-gua-ai-zi-miao/</id>
        <link href="https://xuaii.github.io/post/you-xi-wai-gua-ai-zi-miao/">
        </link>
        <updated>2022-09-13T05:22:56.000Z</updated>
        <content type="html"><![CDATA[<p><strong>参考列表</strong><br>
<a href="http://study.yali.edu.cn/pythonhelp/extending/embedding.html">Python embedding</a></p>
<p><a href="http://t.zoukankan.com/watermoon-p-4367528.html">c++多线程调用python</a></p>
<p><a href="https://github.com/Baiyuetribe/ncnn-models/tree/main/object_dection/yolov7">yolov7-ncnn</a></p>
<p><a href="https://github.com/dog-qiuqiu/Yolo-FastestV2">Yolo-FastestV2</a></p>
<p><a href="https://blog.csdn.net/u012483097/article/details/109069388">ncnn教程</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/391609325">ncnn 环境</a></p>
<p><a href="https://blog.csdn.net/znsoft/article/details/117128781">opencv之Mat格式数据转换成onnxruntime的输入tensor处理的c++写法</a></p>
<p><a href="https://tryolabs.github.io/norfair/reference/tracker/#norfair.tracker.Tracker">Tracker - Norfair</a></p>
<p><a href="https://www.bilibili.com/read/cv11146846">FPS游戏的鼠标灵敏度换算方法</a></p>
<p><a href="https://github.com/phoboslab/jsmpeg-vnc">phoboslab/jsmpeg-vnc</a></p>
<p><a href="https://learn.microsoft.com/zh-cn/windows/win32/direct3ddxgi/desktop-dup-api">桌面复制 API - Win32 apps | Microsoft Learn</a><a href="https://learn.microsoft.com/zh-cn/windows/win32/direct3ddxgi/desktop-dup-api">桌面复制 API - Win32 apps | Microsoft Learn</a></p>
<p>最近看到有些 FPS 游戏主播被锤外挂，不禁有些感叹 人菜逼事多。所以产生了研究AI自瞄原理的想法。首先做AI自瞄不是想开挂，而是对于反外挂而言 只有了解Hacker才能Anti-Hacker。</p>
<h2 id="总体思路">总体思路</h2>
<p>传统的 FPS 游戏外挂需要<strong>读内存</strong>、<strong>改内存</strong>，因此很容易被检测。而 AI 自瞄只读取游戏画面(可以通过<strong>屏幕捕获</strong>、<strong>外置摄像头</strong>)，通过<strong>目标检测方法</strong> 准确的识别出游戏中的目标的类型和位置，然后通过各种<strong>移动准星</strong>的方法将准星移动到目标位置，AI 自瞄系统应该仅提供基础设施（识别系统、脚本系统、配置系统），玩家可以自定义视频输入方式，通过脚本系统定义 &quot;如何瞄准敌人&quot;（添加抖动等），定义识别系统的参数。</p>
<p>// 为了高效运行，外挂的运行时使 C/C++，脚本系统使用 Python / C#</p>
<p>但是，将屏幕捕获交给玩家会加重识别系统的的任务（识别敌人 + 识别屏幕），再加上坐标变换后降低了准确度，为了使识别准确度尽可能提高，将采用捕获屏幕作为输入。</p>
<p>github <a href="https://github.com/xuaii/apex-auto-aim">项目地址</a></p>
<h2 id="读取游戏画面"><strong>读取游戏画面</strong></h2>
<p><a href="https://blog.csdn.net/tuan8888888/article/details/120761111">windows 屏幕抓取技术总结</a> 总结了windows 下各个平台的屏幕抓取性能开销对比，但是和我实测的数据有些偏差，在我实测中 DXGI 几乎不消耗 CPU/GPU 资源，GDI方案消耗大量的 CPU 资源。但是在启动了 APEX 的情况下 DXGI 仅能达到 90fps， GDI 能达到 200fps，所以我们的方案采用 GDI 方法，GDI 抓屏参考(几乎是copy)了 <a href="https://github.com/phoboslab/jsmpeg-vnc">phoboslab/jsmpeg-vnc: A low latency, high framerate screen sharing server for Windows and client for browsers</a> 的grabber方法，并且取得很高的效率。</p>
<pre><code class="language-c">#ifndef GRABBER_H
#define GRABBER_H

#define WIN32_LEAN_AND_MEAN
#include &lt;Windows.h&gt;

typedef struct {
    int x, y, width, height;
} grabber_crop_area_t;

typedef struct {
    HWND window;

    HDC windowDC;
    HDC memoryDC;
    HBITMAP bitmap;
    BITMAPINFOHEADER bitmapInfo;

    int width;
    int height;

    void *pixels;
    grabber_crop_area_t crop;
} grabber_t;

grabber_t *grabber_create(HWND window, grabber_crop_area_t crop);
void grabber_destroy(grabber_t *self);
void *grabber_grab(grabber_t *self);

#endif
</code></pre>
<p>该实现需要先获取 windows 窗口句柄，然后初始化 grabber</p>
<pre><code class="language-c++">#include &lt;Windows.h&gt; 
...
HWND handle = FindWindow(NULL, TEXT(&quot;Apex Legends&quot;));
if(!handle) return -1;
grabber_crop_area_t crop { 0, 0, 0, 0 };
grabber_t * grabber = grabber_create(handle, crop);
...
while(1)
{
    void* data = grabber_grab(grabber);
    ...
}
</code></pre>
<p>这里踩的坑是 void* 是一个字节数组，也就是 uchar* 数组而在  grabber.c 中设置了</p>
<pre><code class="language-c++">bitmapInfo.biBitCount = 32;
bitmapInfo.biCompression = BI_RGB;
</code></pre>
<p>我们不需要 A 通道数据，所以设置</p>
<pre><code class="language-c++">bitmapInfo.biBitCount = 24
</code></pre>
<p>这意味着要将 grabber 捕获到的数据是 RGB 格式的用 opencv 读取需要格式 CV_8U3C:</p>
<pre><code class="language-c++">void* pixel = grabber_grab(grabber);
// 8U3C -&gt; 3 通道每通道 8 位
cv::Mat frame = cv::Mat(cv::Size{ grabber-&gt;width, grabber-&gt;height }, CV_8UC3);
frame.data = (uchar*)pixel;
</code></pre>
<p>由于opencv 的格式是 BGR，神经网络输入格式是 RGB；将 cv::Mat 转为 ncnn::Mat 时需要进行格式转换：</p>
<pre><code class="language-c++">ncnn::Mat in = ncnn::Mat::from_pixels_resize(croped.data, ncnn::Mat::PIXEL_BGR2RGB, croped.cols, croped.rows, target_size, target_size);
</code></pre>
<p>这里可以直接从 void* 转换到 ncnn::Mat , 为了测试方便还是先转换成 cv::Mat 方便使用 cv::imshow() 显示到窗口。</p>
<h2 id="识别目标"><strong>识别目标</strong></h2>
<p><strong>识别目标</strong> 是最重要的一环，也是踩坑最多的一环。神经网络<strong>训练时框架</strong>太笨重，不适合用于软件嵌入，现有的推理框架：</p>
<ol>
<li>
<p>NCNN：腾讯的产品，号称 &quot;<strong>0 依赖</strong>&quot;，运行时确实不需要 .dll 开发时需要 <strong>protobuf</strong>，<strong>vulkan</strong>。在移动平台等边缘设备优化是最好的，很适合用于 嵌入应用.</p>
</li>
<li>
<p>MNN、MACE、TF-lite、Paddle-lite 这些都类似 NCNN 主打移动端推理</p>
</li>
<li>
<p>TensorRT：Nvidia 的框架，一般来说 Nvidia 下用该框架时最快的依赖 <strong>cuda</strong>,<strong>cudann</strong></p>
<p><a href="https://github.com/Linaom1214/TensorRT-For-YOLO-Series/blob/main/cpp/end2end/main.cpp">TensorRT-For-YOLO-Series/main.cpp at main · Linaom1214/TensorRT-For-YOLO-Series (github.com)</a></p>
</li>
<li>
<p>OpenVINO：Intel家的，缺点很明显不支持 AMD CPU</p>
</li>
</ol>
<p>对于 AI 自瞄来说最好的选择是 NCNN 或者 TensorRT（但是开始这个项目之前没怎么了解过，先后使用了libtorch、OnnxRuntime、NCNN、TensorRT）</p>
<p>为了方便后续添加功能，例如移动端的实现，采用 <strong>Tensorrt</strong> 和 <strong>NCNN</strong> 两种实现。</p>
<p>模型使用 最新的 Yolov7， 准确率高，速度快，在不启动游戏的情况下 RTX2060 可以有120fps 的推理速度。</p>
<p><a href="https://github.com/WongKinYiu/yolov7">GitHub - WongKinYiu/yolov7: Implementation of paper - YOLOv7: Trainable bag-of-freebies sets new state-of-the-art for real-time object detectors</a> 给出了模型训练和模型导出的方法，NCNN/TensorRT 的使用可以在 Github 找到大量的Demo，拿到Demo搞清楚输入输出即可。</p>
<p>这一环最麻烦的是数据格式的转换</p>
<ul>
<li>
<p>BGR -&gt; RGB : 可以由 <code>cv::Mat.convertTo</code>, <code>ncnn::Mat.resize</code> 等方法</p>
</li>
<li>
<p>NHWC -&gt; NCHW: <code>cv::dnn::blobFromImage</code>, <code>transposeND</code>, 三层  for 循环硬转，tensorflow/pytorch 的轴旋转方法</p>
</li>
</ul>
<h2 id="调用track脚本"><strong>调用track脚本</strong></h2>
<p>这里使用 Python 脚本来处理神经网络的输出和鼠标移动，由于不同的用户需求不同，例如 鼠标平滑，定位精度，拉枪速度，鼠标吸附等，process 方法将在每一个推理帧的最后被调用。</p>
<pre><code class="language-python">def process(targets) -&gt; (float, float):
    for target in target:
        print(target)
    return (1.1, 2.0)
</code></pre>
<p>脚本需要和c++交互，process 方法需要被c++调用并捕获输出值，c++ 调用python需要include Python.h 头文件，需要添加 &lt;python_dir&gt;/libs 库文件， 最后程序打包时需要将 python39.dll 添加到 .exe 文件目录，可以使用更小的 embed 版本来将 python 嵌入到应用（只占用10mb）</p>
<pre><code class="language-c++">#define PY_SSIZE_T_CLEAN
#include &lt;Python.h&gt;
int main() 
{ 
    Py_SetPythonHome(std::wstring(config.pythonHome.begin(), config.pythonHome.end()).c_str());

Py_Initialize();//初始化python 

    PyObject *pModule = NULL, *pFunc = NULL, *pArg = NULL; 

    pModule = PyImport_ImportModule(&quot;core&quot;);//引入模块 

    pFunc = PyObject_GetAttrString(pModule, &quot;process&quot;);//直接获取模块中的函数 

    PyObject* list = PyList_New(0);
    Py_INCREF(list);

    for (auto&amp; obj : boxes)
    {
        PyList_Append(list, Py_BuildValue(&quot;(f,f,f,f,f)&quot;, (obj.x1 + obj.x2) / 2, (obj.y1 + obj.y2) / 2, obj.x2 - obj.x1, obj.y2 - obj.y1, obj.score));
    }
    PyDict_SetItemString(dict, &quot;target_list&quot;, list);
    Py_DECREF(list);
    PyDict_SetItemString(dict, &quot;mouse_left_button&quot;, Py_BuildValue(&quot;b&quot;, KEY_DOWN(VK_LBUTTON)));
    PyDict_SetItemString(dict, &quot;mouse_middle_button&quot;, Py_BuildValue(&quot;b&quot;, KEY_DOWN(VK_MBUTTON)));
    PyDict_SetItemString(dict, &quot;mouse_right_button&quot;, Py_BuildValue(&quot;b&quot;, KEY_DOWN(VK_RBUTTON)));
    PyDict_SetItemString(dict, &quot;mouse_ctrl_button&quot;, Py_BuildValue(&quot;b&quot;, KEY_DOWN(VK_CONTROL)));

    PyObject* args = PyTuple_New(1);
    PyTuple_SetItem(args, 0, dict);

    PyObject* pRet = PyObject_CallObject(pFunc, args);
    if (!pRet) return;
    if (PyErr_Occurred())
    {
        PyErr_Print();
    }

    Py_Finalize(); //释放python 

    return 0; 
} 
</code></pre>
<p>python 端需要获取非激活窗口的键盘或者鼠标状态需要使用pyhook， 但是在 c++ 可以很简单的获得：</p>
<pre><code class="language-c++">#define KEY_DOWN(VK_NONAME) ((GetAsyncKeyState(VK_NONAME) &amp; 0x8000)


KEY_DOWN(VK_LBUTTON);
KEY_DOWN(VK_MBUTTON);
KEY_DOWN(VK_RBUTTON);
KEY_DOWN(VK_CONTROL);
</code></pre>
<p>并通过 c++ 传递给 python</p>
<h2 id="更新准星位置"><strong>更新准星位置</strong></h2>
<p>参考了这位老哥的鼠标定位方法 <a href="https://www.bilibili.com/read/cv17317767?from=search&amp;spm_id_from=333.337.0.0">FPS游戏（AI自瞄原理） - 哔哩哔哩 (bilibili.com)</a></p>
<p>但是这里给出的计算方式是有偏差的, 但是利用 <strong>角度替代像素</strong> 是正确的，游戏引擎中相机的角度是使用<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E8%A7%92/1626212?fr=aladdin">欧拉角</a>来计算的, 一般第一人称游戏使用鼠标的 <strong>水平输出</strong>(HorizontalInput) 和</p>
<p><strong>竖直输出</strong>(VerticalInput) 来控制摄像机转动，这一位置，所以对于不同的游戏 XInput 的大小和相机转动的欧拉角可能不一样，也就是说我们定义一个单位:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">像</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">角</mi><mo>(</mo><mi>f</mi><mi>a</mi><mo>)</mo><mo>=</mo><mi mathvariant="normal">转</mi><mi mathvariant="normal">动</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">弧</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">移</mi><mi mathvariant="normal">动</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">像</mi><mi mathvariant="normal">素</mi><mo>(</mo><mi>p</mi><mi>i</mi><mi>x</mi><mi>e</mi><mi>l</mi><mi mathvariant="normal">/</mi><mi>r</mi><mi>a</mi><mi>d</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">像素角(fa) = 转动一弧度移动的像素(pixel/rad)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">像</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">角</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">转</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">弧</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">移</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">像</span><span class="mord cjk_fallback">素</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span></span></p>
<p>像素角的计算和测量</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>a</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">游</mi><mi mathvariant="normal">戏</mi><mi mathvariant="normal">水</mi><mi mathvariant="normal">平</mi><mi mathvariant="normal">转</mi><mi mathvariant="normal">动</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">周</mi><mi mathvariant="normal">需</mi><mi mathvariant="normal">要</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">像</mi><mi mathvariant="normal">素</mi><mo>×</mo><mn>2</mn><mo>×</mo><mi>π</mi></mrow><mn>360</mn></mfrac><mo>×</mo><mi mathvariant="normal">游</mi><mi mathvariant="normal">戏</mi><mi mathvariant="normal">内</mi><mi mathvariant="normal">灵</mi><mi mathvariant="normal">敏</mi><mi mathvariant="normal">度</mi><mo>×</mo><mi>A</mi><mi>D</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">fa = \frac{游戏水平转动一周需要的像素\times 2 \times \pi}{360} \times 游戏内灵敏度  \times ADS
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">游</span><span class="mord cjk_fallback">戏</span><span class="mord cjk_fallback">水</span><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">转</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">周</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">像</span><span class="mord cjk_fallback">素</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">游</span><span class="mord cjk_fallback">戏</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">灵</span><span class="mord cjk_fallback">敏</span><span class="mord cjk_fallback">度</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span></span></p>
<p>所以只需要测量游戏内水平转动一周需要移动的像素即可(游戏内瞄准一个点不断地改变pixel 的值，直到相机画面不会抖一下)，不同倍镜下的 fa 值是不同的需要单独测量。</p>
<pre><code class="language-python">import win32api
import win32con
pixel = 10909
for i in range(pixel)
{
    win32api.mouse_event(xxx, 1, 0, 0, 0)
}
</code></pre>
<p>现在有了 fa 的值之后，再来计算如何将鼠标移动到频幕上的点 Point(x, y), 首先计算目标点和屏幕某点 P 的偏移向量 offset(x, y)但是，真实的移动是发生在游戏空间的 3D 世界。</p>
<p><img src="https://xuaii.github.io/post-images/1664242533685.png" alt="" loading="lazy"><br>
也就是需要将视角方向从OB 调整到OG方向，借鉴 <a href="https://www.bilibili.com/read/cv17317767?from=search&amp;spm_id_from=333.337.0.0">水平像素转角度</a>方法可以先将视线 OB 调整到 OC，再从OC调整到OG，这个过程中 相机到视平面的距离是不变的。<br>
<img src="https://xuaii.github.io/post-images/1664244877946.png" alt="" loading="lazy"><br>
为了保持距离不变，所以是先从 OB -&gt; OI -&gt; OK，所以将三维的转动过程转化为两次二维的转动</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mn>2</mn><mi>s</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>e</mi><mi>n</mi><mo>=</mo><mi>A</mi><mi>B</mi><mo>=</mo><mfrac><mrow><mi>h</mi><mi>a</mi><mi>l</mi><mi>f</mi><mi mathvariant="normal">_</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>e</mi><mi>n</mi><mi mathvariant="normal">_</mi><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mrow><mi>tan</mi><mo>⁡</mo><mfrac><mrow><mi>f</mi><mi>o</mi><mi>v</mi></mrow><mn>2</mn></mfrac></mrow></mfrac><mspace linebreak="newline"></mspace><mspace width="1em"/><mspace linebreak="newline"></mspace><mspace width="1em"/><mspace linebreak="newline"></mspace><msub><mi>θ</mi><mi>x</mi></msub><mo>=</mo><mi mathvariant="normal">∠</mi><mrow><mi>B</mi><mi>A</mi><mi>I</mi></mrow><mo>=</mo><mi>arctan</mi><mo>⁡</mo><mfrac><mrow><mi>B</mi><mi>C</mi></mrow><mrow><mi>A</mi><mi>B</mi></mrow></mfrac><mi>arctan</mi><mo>⁡</mo><mfrac><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><msub><mi>t</mi><mi>x</mi></msub></mrow><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mn>2</mn><mi>s</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>e</mi><mi>n</mi></mrow></mfrac><mspace width="1em"/><mspace linebreak="newline"></mspace><mspace width="1em"/><mspace linebreak="newline"></mspace><mspace width="1em"/><mspace linebreak="newline"></mspace><mspace width="1em"/><mspace linebreak="newline"></mspace><msub><mi>θ</mi><mi>y</mi></msub><mo>=</mo><mi mathvariant="normal">∠</mi><mrow><mi>C</mi><mi>A</mi><mi>G</mi></mrow><mo>=</mo><mi>arctan</mi><mo>⁡</mo><mfrac><mrow><mi>C</mi><mi>G</mi></mrow><mrow><mi>A</mi><mi>C</mi></mrow></mfrac><mo>=</mo><mi>arctan</mi><mo>⁡</mo><mfrac><mrow><mi>C</mi><mi>G</mi></mrow><msqrt><mrow><mi>A</mi><msup><mi>B</mi><mn>2</mn></msup><mo>+</mo><mi>B</mi><msup><mi>C</mi><mn>2</mn></msup></mrow></msqrt></mfrac><mo>=</mo><mi>arctan</mi><mo>⁡</mo><mfrac><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><msub><mi>t</mi><mi>y</mi></msub></mrow><msqrt><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mn>2</mn><mi>s</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>e</mi><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><msubsup><mi>t</mi><mi>x</mi><mn>2</mn></msubsup></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">dis2screen = AB = \frac{half\_screen\_width}{\tan{\frac{fov}{2}}} \\
\quad\\
 \quad\\

\theta_x = \angle{BAI} =  \arctan{\frac{BC}{AB}} \arctan{\frac{offset_x}{dis2screen}}
 \quad\\
 \quad\\
 \quad\\
 \quad\\
\theta_y = \angle{CAG} = \arctan{\frac{CG}{AC}} = \arctan{\frac{CG}{\sqrt{AB^2+BC^2}}} = \arctan{\frac{offset_y}{\sqrt{dis2screen^2 + offset_x^2}}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord">2</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.5616559999999997em;vertical-align:-1.1672159999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.39444em;"><span style="top:-2.177784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6999999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1672159999999998em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord">2</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">A</span><span class="mord mathdefault">G</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.29033em;vertical-align:-0.93em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.5014399999999997em;vertical-align:-1.13em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.178446em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931554em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord">2</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.891554em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.308446em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.13em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p>
<p>这样就得到了两个方向的偏转角<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>θ</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>y</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(\theta_x, \theta_y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，所以根据之前测量得到的 fa 值，可以得到鼠标的像素偏移值：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>i</mi><mi>x</mi><mi>e</mi><msub><mi>l</mi><mi>i</mi></msub><mo>=</mo><msub><mi>θ</mi><mi>i</mi></msub><mo>×</mo><mfrac><mrow><mi>f</mi><mi>a</mi></mrow><mrow><mi mathvariant="normal">游</mi><mi mathvariant="normal">戏</mi><mi mathvariant="normal">内</mi><mi mathvariant="normal">灵</mi><mi mathvariant="normal">敏</mi><mi mathvariant="normal">度</mi><mo>×</mo><mi>F</mi><mi>O</mi><mi>V</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">pixel_i = \theta_i \times \frac{fa}{游戏内灵敏度\times FOV}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.14077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">游</span><span class="mord cjk_fallback">戏</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">灵</span><span class="mord cjk_fallback">敏</span><span class="mord cjk_fallback">度</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>所以就可以由屏幕偏移量 offset 得到鼠标偏移量 pixel， 此外需要能够移动鼠标的方法，在 python 环境下，常规的自动化库方法都是无效的，鼠标驱动层的移动应该是有效的但是麻烦，win32api 也是有效的，不过需要以管理员权限启动程序。</p>
<pre><code class="language-python">import win32api
import win32con
win32api.mouse_event(win32con.MOUSEEVENTF_MOVE, int(pixel_x), int(pixel_y), 0, 0)
</code></pre>
<h2 id="使用-json-读取配置">使用 Json 读取配置</h2>
<p>使用简单又方便的 <a href="https://github.com/nlohmann/json">nlohmann/json: JSON for Modern C++ (github.com)</a>，只有 .hpp 头文件</p>
<pre><code class="language-c">std::cout &lt;&lt; &quot;# init config ...&quot; &lt;&lt; std::endl;
// ----------------------- config -----------------------
std::ifstream f = std::ifstream();
json json_data;;
Config config;
// 需要根据当前运行环境构造文件全名
try {
    f.open(&quot;./config.json&quot;);
    json_data = json::parse(f);
    std::cout &lt;&lt; &quot;[init] load config from: &quot; &lt;&lt; &quot;config.json&quot; &lt;&lt; std::endl;
    config.windowName = json_data[&quot;windowName&quot;];
    config.classNamesPath = json_data[&quot;classNamesPath&quot;];        config.pythonHome = json_data[&quot;pythonHome&quot;];
    config.debug = json_data[&quot;debug&quot;];
    config.detectorName = json_data[&quot;detectorName&quot;];
    config.paramPath = json_data[&quot;paramPath&quot;];
    config.binPath = json_data[&quot;binPath&quot;];
    config.boxThreshold = json_data[&quot;boxThreshold&quot;];
    config.nmsThreshold = json_data[&quot;nmsThreshold&quot;];
    config.useGPU = true;
    config.mouseMovementDelay = json_data[&quot;mouseMovementDelay&quot;];
    config.receptiveField = json_data[&quot;receptiveField&quot;];
}
catch (std::exception&amp; e) {
    std::cout &lt;&lt; &quot;配置文件读取失败&quot; &lt;&lt; std::endl;
    return -1;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Godot] Geometry 对象使用]]></title>
        <id>https://xuaii.github.io/post/godot-geometry/</id>
        <link href="https://xuaii.github.io/post/godot-geometry/">
        </link>
        <updated>2022-09-12T04:36:28.000Z</updated>
        <content type="html"><![CDATA[<p>之前一直忽略了官方文档中的<a href="https://docs.godotengine.org/zh_CN/stable/classes/index.html">API列表</a>，很多常用的操作都有现成的API，不需要自己去写，记录一下常用的 Geometry 对象使用方法。</p>
<p>Geometry 为用户提供了一组<strong>辅助函数</strong>，用于<strong>创建</strong>、<strong>剪裁</strong>、<strong>最近邻</strong>、<strong>判断位置/相交</strong>、<strong>缩放</strong>、<strong>其他</strong> 几何操作。</p>
<p>// 好像缺少<strong>曲面细分</strong>等操作</p>
<p><strong>创建几何形状</strong></p>
<pre><code class="language-c#">Array build_box_planes ( Vector3 extents );
</code></pre>
<pre><code class="language-c#">// 生成面状胶囊
Array build_capsule_planes ( float radius, float height, int sides, int lats, Vector3.Axis axis=2 );
</code></pre>
<pre><code class="language-c#">// 生成切面圆柱体
Array build_cylinder_planes ( float radius, float height, int sides, Vector3.Axis axis=2 );
</code></pre>
<p><strong>剪裁</strong><br>
该类操作可能导致产生外部多边形（边界）和内部多边形（孔），可以通过调用 is_polygon_clockwise来区分。</p>
<pre><code class="language-c#">// 使用平面剪裁多边形
PoolVector3Array clip_polygon ( PoolVector3Array points, Plane plane );
</code></pre>
<pre><code class="language-c#">/*
将polygon_a与polygon_b进行对比，并返回一个被剪切的多边形数组。这在多边形之间执行OPERATION_DIFFERENCE。如果polygon_b与polygon_a完全重合，则返回一个空数组。
*/
Array clip_polygons_2d ( PoolVector2Array polygon_a, PoolVector2Array polygon_b );
</code></pre>
<pre><code class="language-c#">/*
将polyline与polygon相对应，并返回一个折线数组。在折线和多边形之间执行OPERATION_DIFFERENCE。这个操作可以被认为是用一个封闭的形状切割一条折线。
*/
Array clip_polyline_with_polygon_2d ( PoolVector2Array polyline, PoolVector2Array polygon );
</code></pre>
<pre><code class="language-c#">// 相互排除由 polygon_a 和 polygon_b（见 intersect_polygons_2d）的交叉点定义的公共区域，并返回一个排除的多边形数组。这在多边形之间执行了 **OPERATION_XOR**。换句话说，返回多边形之间除公共区域外的所有区域。
Array exclude_polygons_2d ( PoolVector2Array polygon_a, PoolVector2Array polygon_b )
</code></pre>
<pre><code class="language-c#">// 给出一个Vector2s的数组，以逆时针的顺序返回凸面的点的列表。最后一个点与第一个点相同。
// 将任意多边形分解为多个凸包
PoolVector2Array convex_hull_2d ( PoolVector2Array points )
</code></pre>
<pre><code class="language-c#">// 将polygon_a与polygon_b相交并返回相交的多边形数组。这在多边形之间执行OPERATION_INTERSECTION。换句话说，返回多边形共享的公共区域。如果没有发生相交，则返回一个空数组。
Array intersect_polygons_2d ( PoolVector2Array polygon_a, PoolVector2Array polygon_b )
</code></pre>
<pre><code class="language-c#">// 将polyline与polygon相交，并返回相交的折线数组。这在折线和多边形之间执行了OPERATION_INTERSECTION。这个操作可以被认为是用一个封闭的形状砍断一条线。
Array intersect_polyline_with_polygon_2d ( PoolVector2Array polyline, PoolVector2Array polygon )
</code></pre>
<pre><code class="language-c#">// 检查两行（from_a，dir_a）和（from_b，dir_b）是否相交。如果是，则将相交点返回为Vector2。如果没有交叉，则返回一个空的Variant。
// 注意：线是使用方向向量而不是终点指定的。
Variant line_intersects_line_2d ( Vector2 from_a, Vector2 dir_a, Vector2 from_b, Vector2 dir_b )
</code></pre>
<pre><code class="language-c#">// 合并（结合）polygon_a 和 polygon_b，并返回一个合并的多边形数组。在多边形之间执行 OPERATION_UNION。
Array merge_polygons_2d ( PoolVector2Array polygon_a, PoolVector2Array polygon_b )

// 合并（结合）polygon_a 和 polygon_b，并返回一个合并的多边形数组。在多边形之间执行 OPERATION_UNION。
Array merge_polygons_2d ( PoolVector2Array polygon_a, PoolVector2Array polygon_b )
</code></pre>
<p><strong>最近邻</strong></p>
<pre><code class="language-c#">// 返回3D部份（s1, s2）上离point最近的3D点。返回的点将总是在指定的部份内。
Vector3 get_closest_point_to_segment ( Vector3 point, Vector3 s1, Vector3 s2 )

// 返回2D段（s1, s2）上最接近point的2D点。返回的点将总是在指定的线段内。
Vector2 get_closest_point_to_segment_2d ( Vector2 point, Vector2 s1, Vector2 s2 )

// 返回由（s1, s2）定义的三维直线上最接近 point的三维点。返回的点可以在线段内（s1, s2），也可以在线段外，即在线段延伸的某处。
Vector3 get_closest_point_to_segment_uncapped ( Vector3 point, Vector3 s1, Vector3 s2 )

// 返回由（s1, s2）定义的二维线上最接近point的二维点。返回的点可以在线段（s1, s2）内，也可以在线段外，即在从线段延伸出来的某处。
Vector2 get_closest_point_to_segment_uncapped_2d ( Vector2 point, Vector2 s1, Vector2 s2 )

// 给定两个 3D 线段 (p1，p2) 和 (q1，q2)，到这两个线段上最接近的两个点。返回一个 PoolVector3Array，其中包含 (p1，p2) 上的这个点以及 (q1，q2) 上的伴随点.
PoolVector3Array get_closest_points_between_segments ( Vector3 p1, Vector3 p2, Vector3 q1, Vector3 q2 )

// 给定两个 2D 线段 (p1，q1) 和 (p2，q2)，找到这两个线段上最接近的两个点。返回一个 PoolVector2Array，其中包含 (p1，q1) 上的这个点以及 (p2, q2) 上的伴随点.
PoolVector2Array get_closest_points_between_segments_2d ( Vector2 p1, Vector2 q1, Vector2 p2, Vector2 q2 )
</code></pre>
<p><strong>判断位置/相交</strong></p>
<pre><code class="language-c#">// 返回true时，point位于圆的内部或者正好位于圆的边界上，否则将返回false。
bool is_point_in_circle ( Vector2 point, Vector2 circle_position, float circle_radius )

// 返回true时，point位于多边形polygon的内部或者正好位于多边形的边界上，否则将返回false。
bool is_point_in_polygon ( Vector2 point, PoolVector2Array polygon )

// 如果多边形 polygon 的顶点按顺时针顺序排序，则返回 true，否则返回 false。
bool is_polygon_clockwise ( PoolVector2Array polygon )

// 如果点point在a、b和c所指定的三角形内，则返回。
bool point_is_inside_triangle ( Vector2 point, Vector2 a, Vector2 b, Vector2 c ) const

// 测试从from开始，方向为dir的3D射线是否与a、b和c指定的三角形相交。如果是，返回相交点为Vector3。如果没有发生相交，将返回一个空的Variant。
Variant ray_intersects_triangle ( Vector3 from, Vector3 dir, Vector3 a, Vector3 b, Vector3 c )

// 给出2D线段（segment_from，segment_to），返回线段上与圆心为 circle_position 、半径为 circle_radius 圆的相交位置（以0到1之间的数字）。如果线段没有与圆相交，则返回-1（如果延伸线段的线段与圆相交，但线段没有相交，也是这种情况）。
float segment_intersects_circle ( Vector2 segment_from, Vector2 segment_to, Vector2 circle_position, float circle_radius )

// 给定一个通过数组 planes 中的 Planes 定义的凸面体，测试线段（from，to）是否与该面体相交。如果找到相交点，返回一个PoolVector3Array，包含相交点和凸面体的法线。如果没有找到相交点，返回的数组为空。
PoolVector3Array segment_intersects_convex ( Vector3 from, Vector3 to, Array planes )

// 检查线段（from，to）是否与高度 height 的圆柱体相交，圆柱体以原点为中心，半径为 radius。如果没有，返回一个空的 PoolVector3Array。如果发生了相交，返回的数组包含相交点和圆柱体在相交点的法线。
PoolVector3Array segment_intersects_cylinder ( Vector3 from, Vector3 to, float height, float radius )

// 检查两段（from_a, to_a）和（from_b, to_b）是否相交。如果是，返回相交点为Vector2。如果没有发生相交，返回一个空的Variant。
Variant segment_intersects_segment_2d ( Vector2 from_a, Vector2 to_a, Vector2 from_b, Vector2 to_b )

// 检查线段（from，to）是否与球心为 sphere_position、半径为 sphere_radius 的球体相交。如果没有，返回一个空的 PoolVector3Array。如果相交，返回一个包含交点和交点处球体法线的 PoolVector3Array。
PoolVector3Array segment_intersects_sphere ( Vector3 from, Vector3 to, Vector3 sphere_position, float sphere_radius )

// 测试段（from，to）是否与三角形a，b，c相交。如果是，返回相交点为Vector3。如果没有发生相交，则返回一个空的Variant。
Variant segment_intersects_triangle ( Vector3 from, Vector3 to, Vector3 a, Vector3 b, Vector3 c )
</code></pre>
<p><strong>缩放</strong></p>
<pre><code class="language-c#">Array offset_polygon_2d ( PoolVector2Array polygon, float delta, PolyJoinType join_type=0 )

// 通过 delta 单位（像素）膨胀或缩小多边形 polygon。如果 delta 是正数，使多边形向外增长。如果 delta 是负数，则使多边形向内收缩。返回一个多边形数组，因为膨胀或缩小可能导致多个离散的多边形。如果 delta 为负数，并且其绝对值大约超过了多边形的最小边界矩形尺寸，则返回一个空数组。

// 每个多边形的顶点将按照 join_type 确定的方式进行圆角处理，见 PolyJoinType。

// 注意：要具体平移多边形的顶点，请使用 Transform2D.xform 方法。
// eg:
var polygon = PoolVector2Array([ Vector2(0, 0), Vector2(100, 0), Vector2(100, 100), Vector2(0, 100) ] )
var offset = Vector2(50, 50)
polygon = Transform2D(0, offset).xform(polygon)
print(polygon) #打印出 [Vector2(50, 50), Vector2(150, 50), Vector2(150, 150), Vector2(50, 150)] 。
</code></pre>
<pre><code class="language-c#">// 通过delta单位（像素）对多边形线polyline进行充气或放气，产生多边形。如果delta为正数，则使多段线向外增长。返回一个多边形数组，因为充气/放气可能导致多个离散的多边形。如果delta为负数，返回一个空数组。
// 每个多边形的顶点将由join_type决定，见PolyJoinType。
// 每个多边形的端点将由end_type决定，见PolyEndType。

Array offset_polyline_2d ( PoolVector2Array polyline, float delta, PolyJoinType join_type=0, PolyEndType end_type=3 )
</code></pre>
<p><strong>其他</strong></p>
<pre><code class="language-c#">// 给定表示图块的Vector2数组，构建一个地图集。返回的字典有两个键：points是Vector2的向量，用于指定每个图块的位置，size包含整个图集的整体大小，作为Vector2。

// 不太明白这个有什么用
Dictionary make_atlas ( PoolVector2Array sizes )
</code></pre>
<pre><code class="language-c#">// 对由离散的 point 点集合指定的区域进行三角化，使得任何点都不在任何结果三角形的外接圆内。返回一个 PoolIntArray，其中每个三角形由 point 点的三个连续的点索引组成（即返回的数组将有 n * 3 元素，n 是找到的三角形的数量）。如果三角化没有成功，将返回一个空的 PoolIntArray。
PoolIntArray triangulate_delaunay_2d ( PoolVector2Array points )

// 对多边形 polygon 中的点指定的多边形进行三角化。返回一个 PoolIntArray，其中每个三角形由 polygon 中三个连续的点索引组成（即返回的数组将有 n * 3 个元素，n 是找到的三角形的数量）。如果三角化没有成功，将返回一个空的 PoolIntArray。
PoolIntArray triangulate_polygon ( PoolVector2Array polygon )
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法学习列表]]></title>
        <id>https://xuaii.github.io/post/suan-fa-xue-xi-lie-biao/</id>
        <link href="https://xuaii.github.io/post/suan-fa-xue-xi-lie-biao/">
        </link>
        <updated>2022-09-11T04:10:03.000Z</updated>
        <content type="html"><![CDATA[<p><strong>参考列表</strong><br>
<a href="https://github.com/williamfiset/Algorithms">Wialliam Fiset's Algorithms</a><br>
<a href="https://github.com/keon/algorithms">Keon's Algorithms</a><br>
<a href="https://github.com/xtaci/algorithms">Xtaci's Algorithms</a><br>
<a href="https://github.com/labuladong/fucking-algorithm">Labuladong's Fucking-Algorithms</a><br>
<a href="https://github.com/geekxh/hello-algorithm">Geekxh's Hello-Algorithms</a><br>
<a href="https://github.com/algorithm-visualizer/algorithm-visualizer">Algorithm-Visualizer</a><br>
<a href="https://github.com/justjavac/free-programming-books-zh_CN">Justjavac's Free-Programming-Books</a><br>
<a href="https://github.com/imarvinle/awesome-cs-books">Imarvinle's Awesome-CS-Books</a><br>
<a href="http://jeffe.cs.illinois.edu/teaching/algorithms/">Jeffe's Algorithms Course</a></p>
<p>主要关注其中 <strong>操作系统</strong>、<strong>算法</strong>、<strong>图形学</strong>、<strong>设计模式</strong>、<strong>游戏引擎</strong>、<strong>C#</strong>、 <strong>C/C++</strong> 、<strong>编译器中间语言</strong>、<strong>元编程</strong></p>
<p><a href="http://jeffe.cs.illinois.edu/teaching/algorithms/">Jeffe's Crouse</a> 用于<strong>学习</strong>，<a href="https://github.com/williamfiset/Algorithms">Wialliam Fiset's Algorithms</a>, <a href="https://github.com/keon/algorithms">Keon's Algorithms</a>, <a href="https://github.com/xtaci/algorithms">Xtaci's Algorithms</a> 用于<strong>拓展补充</strong>，<a href="https://github.com/labuladong/fucking-algorithm">labuladong 的算法小抄</a>,  <a href="https://www.geekxh.com/">小浩算法</a> 用于<strong>练习</strong></p>
<p>这是一个利用<strong>空闲时间学习</strong>的<strong>长期计划</strong>，或许需要几年时间，学不完没关系，学一点赚一点，加油！</p>
<h2 id="数据结构">数据结构</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7329676"><label class="task-list-item-label" for="task-item-7329676"> Balance Trees</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4461955"><label class="task-list-item-label" for="task-item-4461955"> AVL Tree (recursive)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3512024"><label class="task-list-item-label" for="task-item-3512024"> Red Black Tree (recursive)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5815544"><label class="task-list-item-label" for="task-item-5815544"> Binary Search Tree</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2546339"><label class="task-list-item-label" for="task-item-2546339"> Splay Tree</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2863399"><label class="task-list-item-label" for="task-item-2863399"> Dynamic Array</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6116023"><label class="task-list-item-label" for="task-item-6116023"> Dynamic Array (integer only, fast)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6164115"><label class="task-list-item-label" for="task-item-6164115"> Fenwick Tree</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3919965"><label class="task-list-item-label" for="task-item-3919965"> Fenwick Tree (range query, point update)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8289416"><label class="task-list-item-label" for="task-item-8289416"> (range update, point query)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1330167"><label class="task-list-item-label" for="task-item-1330167"> Fibonacci Heap</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6072128"><label class="task-list-item-label" for="task-item-6072128"> Hashtable</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6382209"><label class="task-list-item-label" for="task-item-6382209"> Hashtable (double hashing)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5004627"><label class="task-list-item-label" for="task-item-5004627"> Hashtable (linear probing)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5357722"><label class="task-list-item-label" for="task-item-5357722"> Hashtable (quadratic probing)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5862030"><label class="task-list-item-label" for="task-item-5862030"> Hashtable (sparate chaning)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6819225"><label class="task-list-item-label" for="task-item-6819225"> Linked List</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7725417"><label class="task-list-item-label" for="task-item-7725417"> Priority Queue</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-651459"><label class="task-list-item-label" for="task-item-651459"> Min Binary Heap</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5872865"><label class="task-list-item-label" for="task-item-5872865"> Min Indexed Binary Heap (sorted key-value pairs, similar to hash-table)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4143477"><label class="task-list-item-label" for="task-item-4143477"> Min D-Heap</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6620711"><label class="task-list-item-label" for="task-item-6620711"> Min Indexed D-Heap (sorted key-value pairs, similar to hash table)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4289996"><label class="task-list-item-label" for="task-item-4289996"> Queue</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-529871"><label class="task-list-item-label" for="task-item-529871"> Queue (integer only, fixed size, fast)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4213535"><label class="task-list-item-label" for="task-item-4213535"> Queue (linked list, generic)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5692257"><label class="task-list-item-label" for="task-item-5692257"> Segment Tree</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2762634"><label class="task-list-item-label" for="task-item-2762634"> Segement Tree (array based, compact)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2052508"><label class="task-list-item-label" for="task-item-2052508"> Segment Tree (linked list generic)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2669042"><label class="task-list-item-label" for="task-item-2669042"> Sparse Table</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8679134"><label class="task-list-item-label" for="task-item-8679134"> Stack</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9279901"><label class="task-list-item-label" for="task-item-9279901"> Stack (integer only, fixed size, fast)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5269672"><label class="task-list-item-label" for="task-item-5269672"> Stack (linked list, generic)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8780780"><label class="task-list-item-label" for="task-item-8780780"> Stack (array, generic)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9447888"><label class="task-list-item-label" for="task-item-9447888"> Suffix Array</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4805770"><label class="task-list-item-label" for="task-item-4805770"> Suffix Array (O(n^2logn))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8994597"><label class="task-list-item-label" for="task-item-8994597"> Suffix Array (O(nlog^2(n))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6581331"><label class="task-list-item-label" for="task-item-6581331"> Suffix Array (O(nlogn))</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-781488"><label class="task-list-item-label" for="task-item-781488"> Trie</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-952866"><label class="task-list-item-label" for="task-item-952866"> Union Find</label></li>
</ul>
<h2 id="数组">数组</h2>
<p><a href="https://github.com/xtaci/algorithms/blob/master/include/shuffle.h">Array shuffle</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/2darray.h">2D Array</a></p>
<h2 id="动态编程">动态编程</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8002609"><label class="task-list-item-label" for="task-item-8002609"> Coin change problem</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9651541"><label class="task-list-item-label" for="task-item-9651541"> Edit distance (iterative)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6943849"><label class="task-list-item-label" for="task-item-6943849"> Edit distance (recursive)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3734932"><label class="task-list-item-label" for="task-item-3734932"> Knapsack 0/1</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2434571"><label class="task-list-item-label" for="task-item-2434571"> Knapsack unbounded (0/inf)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-391369"><label class="task-list-item-label" for="task-item-391369"> Maximum contiguous subarray</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8338600"><label class="task-list-item-label" for="task-item-8338600"> Longest Common Subsequence (LCS)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-641939"><label class="task-list-item-label" for="task-item-641939"> Longest Increasing Subsequence (LIS)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1841951"><label class="task-list-item-label" for="task-item-1841951"> Longest Palindrome Subsequence (LPS)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1429581"><label class="task-list-item-label" for="task-item-1429581">  Traveling Salesman Problem (dynamic programming, iterative)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2968024"><label class="task-list-item-label" for="task-item-2968024">  Traveling Salesman Problem (dynamic programming, recursive)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5817533"><label class="task-list-item-label" for="task-item-5817533">  Minimum Weight Perfect Matching (iterative, complete graph)</label></li>
</ul>
<p>Examples:</p>
<h3 id="adhoc">Adhoc</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8042806"><label class="task-list-item-label" for="task-item-8042806">  Magic Cows</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-323814"><label class="task-list-item-label" for="task-item-323814">  Narrow Art Gallery</label></li>
</ul>
<h3 id="tiling-problems">Tiling problems</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2759931"><label class="task-list-item-label" for="task-item-2759931"> Tiling Dominoes</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7476798"><label class="task-list-item-label" for="task-item-7476798"> Tiling Dominoes and Trominoes</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3285948"><label class="task-list-item-label" for="task-item-3285948"> Mountain Scenes</label></li>
</ul>
<h2 id="计算几何">计算几何</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2472723"><label class="task-list-item-label" for="task-item-2472723"> Angle between 2D vectors - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3343962"><label class="task-list-item-label" for="task-item-3343962"> Angle between 3D vectors - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3946849"><label class="task-list-item-label" for="task-item-3946849"> Circle-circle intersection point(s) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4833537"><label class="task-list-item-label" for="task-item-4833537"> Circle-line intersection point(s) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7959469"><label class="task-list-item-label" for="task-item-7959469"> Circle-line segment intersection point(s) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7343465"><label class="task-list-item-label" for="task-item-7343465"> Circle-point tangent line(s) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4993088"><label class="task-list-item-label" for="task-item-4993088"> Closest pair of points (line sweeping algorithm) - O(nlog(n))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6348510"><label class="task-list-item-label" for="task-item-6348510"> Collinear points test (are three 2D points on the same line) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-175448"><label class="task-list-item-label" for="task-item-175448"> Convex hull (Graham Scan algorithm) - O(nlog(n))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6787025"><label class="task-list-item-label" for="task-item-6787025"> Convex hull (Monotone chain algorithm) - O(nlog(n))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2115852"><label class="task-list-item-label" for="task-item-2115852"> Convex polygon area - O(n)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7960468"><label class="task-list-item-label" for="task-item-7960468"> Convex polygon cut - O(n)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5376672"><label class="task-list-item-label" for="task-item-5376672"> Convex polygon contains points - O(log(n))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2619603"><label class="task-list-item-label" for="task-item-2619603"> Coplanar points test (are four 3D points on the same plane) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7848767"><label class="task-list-item-label" for="task-item-7848767"> Line class (handy infinite line class) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1122822"><label class="task-list-item-label" for="task-item-1122822"> Line-circle intersection point(s) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4381747"><label class="task-list-item-label" for="task-item-4381747"> Line segment-circle intersection point(s) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2700178"><label class="task-list-item-label" for="task-item-2700178"> Line segment to general form (ax + by = c) - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9396445"><label class="task-list-item-label" for="task-item-9396445"> Line segment-line segment intersection - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7347400"><label class="task-list-item-label" for="task-item-7347400"> Longitude-Latitude geographic distance - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5992047"><label class="task-list-item-label" for="task-item-5992047"> Point is inside triangle check - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5340559"><label class="task-list-item-label" for="task-item-5340559"> Point rotation about point - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5087873"><label class="task-list-item-label" for="task-item-5087873"> Triangle area algorithms - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8631707"><label class="task-list-item-label" for="task-item-8631707"> [UNTESTED] Circle-circle intersection area - O(1)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6869707"><label class="task-list-item-label" for="task-item-6869707"> [UNTESTED] Circular segment area - O(1)</label></li>
</ul>
<h2 id="图论">图论</h2>
<p><strong>Tree algorithms</strong></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1140654"><label class="task-list-item-label" for="task-item-1140654"> 🎥 Rooting an undirected tree - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6206286"><label class="task-list-item-label" for="task-item-6206286"> 🎥 Identifying isomorphic trees - O(?)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8386421"><label class="task-list-item-label" for="task-item-8386421"> 🎥 Tree center(s) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1212182"><label class="task-list-item-label" for="task-item-1212182"> Tree diameter - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8567628"> 🎥 Lowest Common Ancestor (LCA, Euler tour) - O(1) queries, O(nlogn) preprocessing<br>
<strong>Network flow</strong><label class="task-list-item-label" for="task-item-8567628"> 🎥 Lowest Common Ancestor (LCA, Euler tour) - O(1) queries, O(nlogn) preprocessing
**Network flow**</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9896085"><label class="task-list-item-label" for="task-item-9896085"> Bipartite graph verification (adjacency list) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4026853"><label class="task-list-item-label" for="task-item-4026853"> 🎥 Max flow & Min cut (Ford-Fulkerson with DFS, adjacency list) - O(fE)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2433225"><label class="task-list-item-label" for="task-item-2433225"> Max flow & Min cut (Ford-Fulkerson with DFS, adjacency matrix) - O(fV2)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8550944"><label class="task-list-item-label" for="task-item-8550944"> 🎥 Max flow & Min cut (Edmonds-Karp, adjacency list) - O(VE2)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-283690"><label class="task-list-item-label" for="task-item-283690"> 🎥 Max flow & Min cut (Capacity scaling, adjacency list) - O(E2log2(U))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5942704"><label class="task-list-item-label" for="task-item-5942704"> 🎥 Max flow & Min cut (Dinic's, adjacency list) - O(EV2) or O(E√V) for</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5486768"><label class="task-list-item-label" for="task-item-5486768"> bipartite graphs</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8185758"><label class="task-list-item-label" for="task-item-8185758"> Maximum Cardinality Bipartite Matching (augmenting path algorithm, adjacency list) - O(VE)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6591551"><label class="task-list-item-label" for="task-item-6591551"> Min Cost Max Flow (Bellman-Ford, adjacency list) - O(E2V2)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1745824"> Min Cost Max Flow (Johnson's algorithm, adjacency list) - O(E2Vlog(V))<br>
<strong>Main graph theory algorithms</strong><label class="task-list-item-label" for="task-item-1745824"> Min Cost Max Flow (Johnson's algorithm, adjacency list) - O(E2Vlog(V))
**Main graph theory algorithms**</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2311144"><label class="task-list-item-label" for="task-item-2311144"> Articulation points/cut vertices (adjacency list) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7225527"><label class="task-list-item-label" for="task-item-7225527"> Bellman-Ford (edge list, negative cycles, fast & optimized) - O(VE)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8033931"><label class="task-list-item-label" for="task-item-8033931"> 🎥 Bellman-Ford (adjacency list, negative cycles) - O(VE)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1359652"><label class="task-list-item-label" for="task-item-1359652"> Bellman-Ford (adjacency matrix, negative cycles) - O(V3)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9011098"><label class="task-list-item-label" for="task-item-9011098"> 🎥 Breadth first search (adjacency list) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9036761"><label class="task-list-item-label" for="task-item-9036761"> Breadth first search (adjacency list, fast queue) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1078196"><label class="task-list-item-label" for="task-item-1078196"> Bridges/cut edges (adjacency list) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4007900"><label class="task-list-item-label" for="task-item-4007900"> Find connected components (adjacency list, union find) - O(Elog(E))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8516190"><label class="task-list-item-label" for="task-item-8516190"> Find connected components (adjacency list, DFS) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4996287"><label class="task-list-item-label" for="task-item-4996287"> Depth first search (adjacency list, iterative) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7714132"><label class="task-list-item-label" for="task-item-7714132"> Depth first search (adjacency list, iterative, fast stack) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-933289"><label class="task-list-item-label" for="task-item-933289"> 🎥 Depth first search (adjacency list, recursive) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2411674"><label class="task-list-item-label" for="task-item-2411674"> 🎥 Dijkstra's shortest path (adjacency list, lazy implementation) - O(Elog(V))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2480950"><label class="task-list-item-label" for="task-item-2480950"> 🎥 Dijkstra's shortest path (adjacency list, eager implementation + D-ary heap) - O(ElogE/V(V))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5683690"><label class="task-list-item-label" for="task-item-5683690"> 🎥 Eulerian Path (directed edges) - O(E+V)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5888461"><label class="task-list-item-label" for="task-item-5888461"> 🎥 Floyd Warshall algorithm (adjacency matrix, negative cycle check) - O(V3)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3021973"><label class="task-list-item-label" for="task-item-3021973"> Graph diameter (adjacency list) - O(VE)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3597446"><label class="task-list-item-label" for="task-item-3597446"> 🎥 Kahn's algorithm (topological sort, adjacency list) - O(E+V)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6916539"><label class="task-list-item-label" for="task-item-6916539"> Kruskal's min spanning tree algorithm (edge list, union find) - O(Elog(E))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2406016"><label class="task-list-item-label" for="task-item-2406016"> 🎥 Kruskal's min spanning tree algorithm (edge list, union find, lazy sorting) - O(Elog(E))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7964983"><label class="task-list-item-label" for="task-item-7964983"> Kosaraju's strongly connected components algorithm (adjacency list) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-528691"><label class="task-list-item-label" for="task-item-528691"> 🎥 Prim's min spanning tree algorithm (lazy version, adjacency list) - O(Elog(E))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3784894"><label class="task-list-item-label" for="task-item-3784894"> Prim's min spanning tree algorithm (lazy version, adjacency matrix) - O(V2)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6546195"><label class="task-list-item-label" for="task-item-6546195"> 🎥 Prim's min spanning tree algorithm (eager version, adjacency list) - O(Elog(V))</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-811563"><label class="task-list-item-label" for="task-item-811563"> Steiner tree (minimum spanning tree generalization) - O(V3 + V2 _ 2T + V _ 3T)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-387698"><label class="task-list-item-label" for="task-item-387698"> 🎥 Tarjan's strongly connected components algorithm (adjacency list) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-75868"><label class="task-list-item-label" for="task-item-75868"> 🎥 Topological sort (acyclic graph, adjacency list) - O(V+E)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1183857"><label class="task-list-item-label" for="task-item-1183857"> Topological sort (acyclic graph, adjacency matrix) - O(V2)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3119404"><label class="task-list-item-label" for="task-item-3119404"> Traveling Salesman Problem (brute force) - O(n!)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8104702"><label class="task-list-item-label" for="task-item-8104702"> 🎥 Traveling Salesman Problem (dynamic programming, iterative) - O(n22n)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8223995"><label class="task-list-item-label" for="task-item-8223995"> Traveling Salesman Problem (dynamic programming, recursive) - O(n22n)</label></li>
</ul>
<h2 id="线性代数">线性代数</h2>
<p>Freivald's algorithm (matrix multiplication verification) - O(kn2)<br>
Gaussian elimination (solve system of linear equations) - O(cr2)<br>
Gaussian elimination (modular version, prime finite field) - O(cr2)<br>
Linear recurrence solver (finds nth term in a recurrence relation) - O(m3log(n))<br>
Matrix determinant (Laplace/cofactor expansion) - O((n+2)!)<br>
Matrix inverse - O(n3)<br>
Matrix multiplication - O(n3)<br>
Matrix power - O(n3log(p))<br>
Square matrix rotation - O(n2)</p>
<h2 id="数学">数学</h2>
<p><a href="https://github.com/xtaci/algorithms/blob/master/include/integer.h">Arbitrary Integer</a><br>
[UNTESTED] Chinese remainder theorem<br>
Prime number sieve (sieve of Eratosthenes) - O(nlog(log(n)))<br>
Prime number sieve (sieve of Eratosthenes, compressed) - O(nlog(log(n)))<br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/prime.h">Prime test(trial division)</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/prime.h">Prime test(Miller-Rabin's method)</a><br>
Totient function (phi function, relatively prime number count) - O(n1/4)<br>
Totient function using sieve (phi function, relatively prime number count) - O(nlog(log(n)))<br>
Extended euclidean algorithm - ~O(log(a + b))<br>
Greatest Common Divisor (GCD) - ~O(log(a + b))<br>
Fast Fourier transform (quick polynomial multiplication) - O(nlog(n))<br>
Fast Fourier transform (quick polynomial multiplication, complex numbers) - O(nlog(n))<br>
Primality check - O(√n)<br>
Primality check (Rabin-Miller) - O(k)<br>
Least Common Multiple (LCM) - ~O(log(a + b))<br>
Modular inverse - ~O(log(a + b))<br>
Prime factorization (pollard rho) - O(n1/4)<br>
Relatively prime check (coprimality check) - ~O(log(a + b))</p>
<h2 id="搜索算法">搜索算法</h2>
<p>Binary search (real numbers) - O(log(n))<br>
Interpolation search (discrete discrete) - O(n) or O(log(log(n))) with uniform input<br>
Ternary search (real numbers) - O(log(n))<br>
Ternary search (discrete numbers) - O(log(n))</p>
<h2 id="排序算法">排序算法</h2>
<p>Bubble sort - O(n2)<br>
Bucket sort - Θ(n + k)<br>
Counting sort - O(n + k)<br>
Heapsort - O(nlog(n))<br>
Insertion sort - O(n2)<br>
Mergesort - O(nlog(n))<br>
Quicksort (in-place, Hoare partitioning) - Θ(nlog(n))<br>
Quicksort3 (Dutch National Flag algorithm) - Θ(nlog(n))<br>
Selection sort - O(n2)<br>
Radix sort - O(n*w)</p>
<h2 id="字符串算法">字符串算法</h2>
<p>Booth's algorithm (finds lexicographically smallest string rotation) - O(n)<br>
Knuth-Morris-Pratt algorithm (finds pattern matches in text) - O(n+m)<br>
Longest Common Prefix (LCP) array - O(nlog(n)) bounded by SA construction, otherwise O(n)<br>
🎥 Longest Common Substring (LCS) - O(nlog(n)) bounded by SA construction, otherwise O(n)<br>
🎥 Longest Repeated Substring (LRS) - O(nlog(n))<br>
Manacher's algorithm (finds all palindromes in text) - O(n)<br>
Rabin-Karp algorithm (finds pattern match positions in text) - O(n+m)<br>
Substring verification with suffix array - O(nlog(n)) SA construction and O(mlog(n)) per query</p>
<h2 id="其他">其他</h2>
<p>Bit manipulations - O(1)<br>
List permutations - O(n!)<br>
🎥 Power set (set of all subsets) - O(2n)<br>
Set combinations - O(n choose r)<br>
Set combinations with repetition - O((n+r-1) choose r)<br>
Sliding Window Minimum/Maximum - O(1)<br>
Square Root Decomposition - O(1) point updates, O(√n) range queries<br>
Unique set combinations - O(n choose r)<br>
Lazy Range Adder - O(1) range updates, O(n) to finalize all updates<br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/random.h">Linear congruential generator</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/max_subarray.h">Maximum subarray problem</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/bitset.h">Bit-Set</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/double_linked_list.h">Double linked list</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/skiplist.h">Skip list</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/dos_tree.h">Dynamic order statistics</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/interval_tree.h">Interval tree</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/trie.h">Prefix Tree(Trie)</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/suffix_tree.h">Suffix Tree</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/btree.h">B-Tree</a></p>
<h4 id="hash">hash</h4>
<p><a href="https://github.com/xtaci/algorithms/blob/master/include/hash_multi.h">Hash by multiplication</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/hash_table.h">Hash table</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/universal_hash.h">Universal hash function</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/perfect_hash.h">Perfect hash</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/hash_string.h">Java's string hash</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/hash_string.h">FNV-1a string hash</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/simhash.h">SimHash</a></p>
<p><a href="https://github.com/xtaci/algorithms/blob/master/include/bloom_filter.h">Bloom Filter</a></p>
<h4 id="密码学">密码学</h4>
<p><a href="https://github.com/xtaci/algorithms/blob/master/include/sha1.h">SHA-1 Message Digest Algorithm</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/md5.h">MD5</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/base64.h">Base64</a></p>
<p><a href="https://github.com/xtaci/algorithms/blob/master/include/relabel_to_front.h">Push–Relabel algorithm</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/huffman.h">Huffman Coding</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/word_seg.h">Word segementation</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/astar.h">A* algorithm</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/k-means.h">K-Means</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/kmp.h">Knuth–Morris–Pratt algorithm</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/disjoint-set.h">Disjoint-Set</a><br>
<a href="https://github.com/xtaci/algorithms/blob/master/include/8queen.h">8-Queen Problem</a></p>
]]></content>
    </entry>
</feed>